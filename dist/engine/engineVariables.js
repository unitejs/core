"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const uniteClientPackage_1 = require("../configuration/models/unite/uniteClientPackage");
class EngineVariables {
    constructor() {
        this._configuration = {};
        this.syntheticImport = "";
        this.moduleId = "";
        this.buildTranspileInclude = [];
        this.buildTranspilePreBuild = [];
        this.buildTranspilePostBuild = [];
        this._requiredDevDependencies = {};
        this._removedDevDependencies = {};
        this._requiredClientPackages = {};
        this._removedClientPackages = {};
        this._existingClientPackages = {};
        this.additionalCompletionMessages = [];
    }
    setConfiguration(name, config) {
        this._configuration[name] = config;
    }
    getConfiguration(name) {
        return this._configuration[name];
    }
    setupDirectories(fileSystem, rootFolder) {
        this.rootFolder = rootFolder;
        this.wwwRootFolder = fileSystem.pathCombine(this.rootFolder, "www");
        this.packagedRootFolder = fileSystem.pathCombine(this.rootFolder, "packaged");
        this.platformRootFolder = fileSystem.pathCombine(this.rootFolder, "platform");
        this.docsRootFolder = fileSystem.pathCombine(this.rootFolder, "docs");
        this.www = {
            src: fileSystem.pathCombine(this.wwwRootFolder, "src"),
            dist: fileSystem.pathCombine(this.wwwRootFolder, "dist"),
            css: fileSystem.pathCombine(this.wwwRootFolder, "cssSrc"),
            cssDist: fileSystem.pathCombine(this.wwwRootFolder, "css"),
            e2eRoot: fileSystem.pathCombine(this.wwwRootFolder, "test/e2e"),
            e2e: fileSystem.pathCombine(this.wwwRootFolder, "test/e2e/src"),
            e2eDist: fileSystem.pathCombine(this.wwwRootFolder, "test/e2e/dist"),
            unitRoot: fileSystem.pathCombine(this.wwwRootFolder, "test/unit"),
            unit: fileSystem.pathCombine(this.wwwRootFolder, "test/unit/src"),
            unitDist: fileSystem.pathCombine(this.wwwRootFolder, "test/unit/dist"),
            reports: fileSystem.pathCombine(this.wwwRootFolder, "test/reports"),
            assets: fileSystem.pathCombine(this.wwwRootFolder, "assets"),
            assetsSrc: fileSystem.pathCombine(this.wwwRootFolder, "assetsSrc"),
            build: fileSystem.pathCombine(this.wwwRootFolder, "build"),
            package: fileSystem.pathCombine(this.wwwRootFolder, "node_modules"),
            configuration: fileSystem.pathCombine(this.wwwRootFolder, "configuration")
        };
    }
    initialisePackages(clientPackages) {
        this._existingClientPackages = clientPackages;
    }
    toggleClientPackage(key, clientPackage, required) {
        if (required) {
            this.addClientPackage(key, clientPackage);
        }
        else {
            this.removeClientPackage(key, clientPackage);
        }
    }
    addClientPackage(key, clientPackage) {
        if (!clientPackage.version) {
            clientPackage.version = this.findDependencyVersion(clientPackage.name);
        }
        this._requiredClientPackages[key] = clientPackage;
    }
    removeClientPackage(key, clientPackage) {
        this._removedClientPackages[key] = clientPackage;
    }
    toggleDevDependency(dependencies, required) {
        if (required) {
            this.addDevDependency(dependencies);
        }
        else {
            this.removeDevDependency(dependencies);
        }
    }
    addDevDependency(dependencies) {
        dependencies.forEach(dep => {
            const clientPackage = new uniteClientPackage_1.UniteClientPackage();
            clientPackage.name = dep;
            this._requiredDevDependencies[dep] = clientPackage;
        });
    }
    removeDevDependency(dependencies) {
        dependencies.forEach(dep => {
            const clientPackage = new uniteClientPackage_1.UniteClientPackage();
            clientPackage.name = dep;
            this._removedDevDependencies[dep] = clientPackage;
        });
    }
    addVersionedDevDependency(dependency, version) {
        const clientPackage = new uniteClientPackage_1.UniteClientPackage();
        clientPackage.name = dependency;
        clientPackage.version = version;
        this._requiredDevDependencies[dependency] = clientPackage;
    }
    buildDependencies(uniteConfiguration, packageJsonDependencies) {
        for (const key in this._removedClientPackages) {
            const pkg = this._removedClientPackages[key];
            if (packageJsonDependencies[pkg.name]) {
                delete packageJsonDependencies[pkg.name];
            }
            if (this._existingClientPackages[key] &&
                !this._existingClientPackages[key].hasOverrides) {
                delete this._existingClientPackages[key];
            }
        }
        for (const key in this._existingClientPackages) {
            const pkg = this._existingClientPackages[key];
            if (pkg.hasOverrides || !this._requiredClientPackages[key]) {
                this._requiredClientPackages[key] = pkg;
            }
        }
        const addedDevDependencies = [];
        const removedDevDependencies = [];
        for (const key in this._requiredClientPackages) {
            const pkg = this._requiredClientPackages[key];
            uniteConfiguration.clientPackages[key] = pkg;
            if (pkg.includeMode === undefined || pkg.includeMode === "app" || pkg.includeMode === "both") {
                packageJsonDependencies[pkg.name] = pkg.version;
                if (this._requiredDevDependencies[pkg.name]) {
                    delete this._requiredDevDependencies[pkg.name];
                }
                removedDevDependencies.push(pkg.name);
            }
            else {
                addedDevDependencies.push(pkg.name);
            }
        }
        this.toggleDevDependency(addedDevDependencies, true);
        this.toggleDevDependency(removedDevDependencies, false);
    }
    buildDevDependencies(packageJsonDevDependencies) {
        Object.keys(this._removedDevDependencies)
            .forEach(dependency => {
            if (packageJsonDevDependencies[dependency]) {
                delete packageJsonDevDependencies[dependency];
            }
        });
        Object.keys(this._requiredDevDependencies)
            .forEach(requiredDependency => {
            if (this._requiredDevDependencies[requiredDependency].version) {
                packageJsonDevDependencies[requiredDependency] = this._requiredDevDependencies[requiredDependency].version;
            }
            else {
                packageJsonDevDependencies[requiredDependency] = this.findDependencyVersion(requiredDependency);
            }
        });
    }
    findDependencyVersion(requiredDependency) {
        if (this.engineDependencies) {
            if (this.engineDependencies[requiredDependency]) {
                return this.engineDependencies[requiredDependency];
            }
            else {
                throw new Error(`Missing Dependency '${requiredDependency}'`);
            }
        }
        else {
            throw new Error("Dependency Versions missing");
        }
    }
}
exports.EngineVariables = EngineVariables;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9lbmdpbmUvZW5naW5lVmFyaWFibGVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBSUEseUZBQXNGO0FBS3RGO0lBdURJO1FBQ0ksSUFBSSxDQUFDLGNBQWMsR0FBRyxFQUFFLENBQUM7UUFFekIsSUFBSSxDQUFDLGVBQWUsR0FBRyxFQUFFLENBQUM7UUFDMUIsSUFBSSxDQUFDLFFBQVEsR0FBRyxFQUFFLENBQUM7UUFFbkIsSUFBSSxDQUFDLHFCQUFxQixHQUFHLEVBQUUsQ0FBQztRQUNoQyxJQUFJLENBQUMsc0JBQXNCLEdBQUcsRUFBRSxDQUFDO1FBQ2pDLElBQUksQ0FBQyx1QkFBdUIsR0FBRyxFQUFFLENBQUM7UUFFbEMsSUFBSSxDQUFDLHdCQUF3QixHQUFHLEVBQUUsQ0FBQztRQUNuQyxJQUFJLENBQUMsdUJBQXVCLEdBQUcsRUFBRSxDQUFDO1FBQ2xDLElBQUksQ0FBQyx1QkFBdUIsR0FBRyxFQUFFLENBQUM7UUFDbEMsSUFBSSxDQUFDLHNCQUFzQixHQUFHLEVBQUUsQ0FBQztRQUNqQyxJQUFJLENBQUMsdUJBQXVCLEdBQUcsRUFBRSxDQUFDO1FBRWxDLElBQUksQ0FBQyw0QkFBNEIsR0FBRyxFQUFFLENBQUM7SUFDM0MsQ0FBQztJQUVNLGdCQUFnQixDQUFDLElBQVksRUFBRSxNQUFXO1FBQzdDLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLEdBQUcsTUFBTSxDQUFDO0lBQ3ZDLENBQUM7SUFFTSxnQkFBZ0IsQ0FBSSxJQUFZO1FBQ25DLE9BQVUsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUN4QyxDQUFDO0lBRU0sZ0JBQWdCLENBQUMsVUFBdUIsRUFBRSxVQUFrQjtRQUMvRCxJQUFJLENBQUMsVUFBVSxHQUFHLFVBQVUsQ0FBQztRQUM3QixJQUFJLENBQUMsYUFBYSxHQUFHLFVBQVUsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUNw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QUMsT0FBTyxFQUFFO2dCQUMzRCwwQkFBMEIsQ0FBQyxrQkFBa0IsQ0FBQyxHQUFHLElBQUksQ0FBQyx3QkFBd0IsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDLE9BQU8sQ0FBQzthQUM5RztpQkFBTTtnQkFDSCwwQkFBMEIsQ0FBQyxrQkFBa0IsQ0FBQyxHQUFHLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO2FBQ25HO1FBQ0wsQ0FBQyxDQUFDLENBQUM7SUFDWCxDQUFDO0lBRU0scUJBQXFCLENBQUMsa0JBQTBCO1FBQ25ELElBQUksSUFBSSxDQUFDLGtCQUFrQixFQUFFO1lBQ3pCLElBQUksSUFBSSxDQUFDLGtCQUFrQixDQUFDLGtCQUFrQixDQUFDLEVBQUU7Z0JBQzdDLE9BQU8sSUFBSSxDQUFDLGtCQUFrQixDQUFDLGtCQUFrQixDQUFDLENBQUM7YUFDdEQ7aUJBQU07Z0JBQ0gsTUFBTSxJQUFJLEtBQUssQ0FBQyx1QkFBdUIsa0JBQWtCLEdBQUcsQ0FBQyxDQUFDO2FBQ2pFO1NBQ0o7YUFBTTtZQUNILE1BQU0sSUFBSSxLQUFLLENBQUMsNkJBQTZCLENBQUMsQ0FBQztTQUNsRDtJQUNMLENBQUM7Q0FDSjtBQTFPRCwwQ0EwT0MiLCJmaWxlIjoiZW5naW5lL2VuZ2luZVZhcmlhYmxlcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogVmFyaWFibGVzIHVzZWQgYnkgdGhlIGVuZ2luZS5cbiAqL1xuaW1wb3J0IHsgSUZpbGVTeXN0ZW0gfSBmcm9tIFwidW5pdGVqcy1mcmFtZXdvcmsvZGlzdC9pbnRlcmZhY2VzL0lGaWxlU3lzdGVtXCI7XG5pbXBvcnQgeyBVbml0ZUNsaWVudFBhY2thZ2UgfSBmcm9tIFwiLi4vY29uZmlndXJhdGlvbi9tb2RlbHMvdW5pdGUvdW5pdGVDbGllbnRQYWNrYWdlXCI7XG5pbXBvcnQgeyBVbml0ZUNvbmZpZ3VyYXRpb24gfSBmcm9tIFwiLi4vY29uZmlndXJhdGlvbi9tb2RlbHMvdW5pdGUvdW5pdGVDb25maWd1cmF0aW9uXCI7XG5pbXBvcnQgeyBJUGFja2FnZU1hbmFnZXIgfSBmcm9tIFwiLi4vaW50ZXJmYWNlcy9JUGFja2FnZU1hbmFnZXJcIjtcbmltcG9ydCB7IEVuZ2luZVZhcmlhYmxlc01ldGEgfSBmcm9tIFwiLi9lbmdpbmVWYXJpYWJsZXNNZXRhXCI7XG5cbmV4cG9ydCBjbGFzcyBFbmdpbmVWYXJpYWJsZXMge1xuICAgIHB1YmxpYyBtZXRhOiBFbmdpbmVWYXJpYWJsZXNNZXRhO1xuICAgIHB1YmxpYyBmb3JjZTogYm9vbGVhbjtcbiAgICBwdWJsaWMgbm9DcmVhdGVTb3VyY2U6IGJvb2xlYW47XG5cbiAgICBwdWJsaWMgZW5naW5lUm9vdEZvbGRlcjogc3RyaW5nO1xuICAgIHB1YmxpYyBlbmdpbmVBc3NldHNGb2xkZXI6IHN0cmluZztcbiAgICBwdWJsaWMgZW5naW5lVmVyc2lvbjogc3RyaW5nO1xuICAgIHB1YmxpYyBlbmdpbmVEZXBlbmRlbmNpZXM6IHsgW2lkOiBzdHJpbmddOiBzdHJpbmcgfTtcblxuICAgIHB1YmxpYyByb290Rm9sZGVyOiBzdHJpbmc7XG4gICAgcHVibGljIHd3d1Jvb3RGb2xkZXI6IHN0cmluZztcbiAgICBwdWJsaWMgcGFja2FnZWRSb290Rm9sZGVyOiBzdHJpbmc7XG4gICAgcHVibGljIHBsYXRmb3JtUm9vdEZvbGRlcjogc3RyaW5nO1xuICAgIHB1YmxpYyBkb2NzUm9vdEZvbGRlcjogc3RyaW5nO1xuXG4gICAgcHVibGljIHd3dzoge1xuICAgICAgICBbaWQ6IHN0cmluZ106IHN0cmluZztcbiAgICAgICAgc3JjOiBzdHJpbmc7XG4gICAgICAgIGRpc3Q6IHN0cmluZztcbiAgICAgICAgdW5pdFJvb3Q6IHN0cmluZztcbiAgICAgICAgdW5pdDogc3RyaW5nO1xuICAgICAgICB1bml0RGlzdDogc3RyaW5nO1xuICAgICAgICBjc3M6IHN0cmluZztcbiAgICAgICAgY3NzRGlzdDogc3RyaW5nO1xuICAgICAgICBlMmVSb290OiBzdHJpbmc7XG4gICAgICAgIGUyZTogc3RyaW5nO1xuICAgICAgICBlMmVEaXN0OiBzdHJpbmc7XG4gICAgICAgIHJlcG9ydHM6IHN0cmluZztcbiAgICAgICAgcGFja2FnZTogc3RyaW5nO1xuICAgICAgICBidWlsZDogc3RyaW5nO1xuICAgICAgICBjb25maWd1cmF0aW9uOiBzdHJpbmc7XG5cbiAgICAgICAgYXNzZXRzOiBzdHJpbmc7XG4gICAgICAgIGFzc2V0c1NyYzogc3RyaW5nO1xuICAgIH07XG5cbiAgICBwdWJsaWMgYnVpbGRUcmFuc3BpbGVJbmNsdWRlOiBzdHJpbmdbXTtcbiAgICBwdWJsaWMgYnVpbGRUcmFuc3BpbGVQcmVCdWlsZDogc3RyaW5nW107XG4gICAgcHVibGljIGJ1aWxkVHJhbnNwaWxlUG9zdEJ1aWxkOiBzdHJpbmdbXTtcblxuICAgIHB1YmxpYyBzeW50aGV0aWNJbXBvcnQ6IHN0cmluZztcbiAgICBwdWJsaWMgbW9kdWxlSWQ6IHN0cmluZztcblxuICAgIHB1YmxpYyBwYWNrYWdlTWFuYWdlcjogSVBhY2thZ2VNYW5hZ2VyO1xuICAgIHB1YmxpYyBhZGRpdGlvbmFsQ29tcGxldGlvbk1lc3NhZ2VzOiBzdHJpbmdbXTtcblxuICAgIHByaXZhdGUgcmVhZG9ubHkgX2NvbmZpZ3VyYXRpb246IHsgW2lkOiBzdHJpbmddOiBhbnkgfTtcblxuICAgIHByaXZhdGUgcmVhZG9ubHkgX3JlcXVpcmVkRGV2RGVwZW5kZW5jaWVzOiB7IFtpZDogc3RyaW5nXTogVW5pdGVDbGllbnRQYWNrYWdlIH07XG4gICAgcHJpdmF0ZSByZWFkb25seSBfcmVtb3ZlZERldkRlcGVuZGVuY2llczogeyBbaWQ6IHN0cmluZ106IFVuaXRlQ2xpZW50UGFja2FnZSB9O1xuICAgIHByaXZhdGUgcmVhZG9ubHkgX3JlcXVpcmVkQ2xpZW50UGFja2FnZXM6IHsgW2lkOiBzdHJpbmddOiBVbml0ZUNsaWVudFBhY2thZ2UgfTtcbiAgICBwcml2YXRlIHJlYWRvbmx5IF9yZW1vdmVkQ2xpZW50UGFja2FnZXM6IHsgW2lkOiBzdHJpbmddOiBVbml0ZUNsaWVudFBhY2thZ2UgfTtcbiAgICBwcml2YXRlIF9leGlzdGluZ0NsaWVudFBhY2thZ2VzOiB7IFtpZDogc3RyaW5nXTogVW5pdGVDbGllbnRQYWNrYWdlIH07XG5cbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5fY29uZmlndXJhdGlvbiA9IHt9O1xuXG4gICAgICAgIHRoaXMuc3ludGhldGljSW1wb3J0ID0gXCJcIjtcbiAgICAgICAgdGhpcy5tb2R1bGVJZCA9IFwiXCI7XG5cbiAgICAgICAgdGhpcy5idWlsZFRyYW5zcGlsZUluY2x1ZGUgPSBbXTtcbiAgICAgICAgdGhpcy5idWlsZFRyYW5zcGlsZVByZUJ1aWxkID0gW107XG4gICAgICAgIHRoaXMuYnVpbGRUcmFuc3BpbGVQb3N0QnVpbGQgPSBbXTtcblxuICAgICAgICB0aGlzLl9yZXF1aXJlZERldkRlcGVuZGVuY2llcyA9IHt9O1xuICAgICAgICB0aGlzLl9yZW1vdmVkRGV2RGVwZW5kZW5jaWVzID0ge307XG4gICAgICAgIHRoaXMuX3JlcXVpcmVkQ2xpZW50UGFja2FnZXMgPSB7fTtcbiAgICAgICAgdGhpcy5fcmVtb3ZlZENsaWVudFBhY2thZ2VzID0ge307XG4gICAgICAgIHRoaXMuX2V4aXN0aW5nQ2xpZW50UGFja2FnZXMgPSB7fTtcblxuICAgICAgICB0aGlzLmFkZGl0aW9uYWxDb21wbGV0aW9uTWVzc2FnZXMgPSBbXTtcbiAgICB9XG5cbiAgICBwdWJsaWMgc2V0Q29uZmlndXJhdGlvbihuYW1lOiBzdHJpbmcsIGNvbmZpZzogYW55KTogdm9pZCB7XG4gICAgICAgIHRoaXMuX2NvbmZpZ3VyYXRpb25bbmFtZV0gPSBjb25maWc7XG4gICAgfVxuXG4gICAgcHVibGljIGdldENvbmZpZ3VyYXRpb248VD4obmFtZTogc3RyaW5nKTogVCB7XG4gICAgICAgIHJldHVybiA8VD50aGlzLl9jb25maWd1cmF0aW9uW25hbWVdO1xuICAgIH1cblxuICAgIHB1YmxpYyBzZXR1cERpcmVjdG9yaWVzKGZpbGVTeXN0ZW06IElGaWxlU3lzdGVtLCByb290Rm9sZGVyOiBzdHJpbmcpIDogdm9pZCB7XG4gICAgICAgIHRoaXMucm9vdEZvbGRlciA9IHJvb3RGb2xkZXI7XG4gICAgICAgIHRoaXMud3d3Um9vdEZvbGRlciA9IGZpbGVTeXN0ZW0ucGF0aENvbWJpbmUodGhpcy5yb290Rm9sZGVyLCBcInd3d1wiKTtcbiAgICAgICAgdGhpcy5wYWNrYWdlZFJvb3RGb2xkZXIgPSBmaWxlU3lzdGVtLnBhdGhDb21iaW5lKHRoaXMucm9vdEZvbGRlciwgXCJwYWNrYWdlZFwiKTtcbiAgICAgICAgdGhpcy5wbGF0Zm9ybVJvb3RGb2xkZXIgPSBmaWxlU3lzdGVtLnBhdGhDb21iaW5lKHRoaXMucm9vdEZvbGRlciwgXCJwbGF0Zm9ybVwiKTtcbiAgICAgICAgdGhpcy5kb2NzUm9vdEZvbGRlciA9IGZpbGVTeXN0ZW0ucGF0aENvbWJpbmUodGhpcy5yb290Rm9sZGVyLCBcImRvY3NcIik7XG4gICAgICAgIHRoaXMud3d3ID0ge1xuICAgICAgICAgICAgc3JjOiBmaWxlU3lzdGVtLnBhdGhDb21iaW5lKHRoaXMud3d3Um9vdEZvbGRlciwgXCJzcmNcIiksXG4gICAgICAgICAgICBkaXN0OiBmaWxlU3lzdGVtLnBhdGhDb21iaW5lKHRoaXMud3d3Um9vdEZvbGRlciwgXCJkaXN0XCIpLFxuICAgICAgICAgICAgY3NzOiBmaWxlU3lzdGVtLnBhdGhDb21iaW5lKHRoaXMud3d3Um9vdEZvbGRlciwgXCJjc3NTcmNcIiksXG4gICAgICAgICAgICBjc3NEaXN0OiBmaWxlU3lzdGVtLnBhdGhDb21iaW5lKHRoaXMud3d3Um9vdEZvbGRlciwgXCJjc3NcIiksXG4gICAgICAgICAgICBlMmVSb290OiBmaWxlU3lzdGVtLnBhdGhDb21iaW5lKHRoaXMud3d3Um9vdEZvbGRlciwgXCJ0ZXN0L2UyZVwiKSxcbiAgICAgICAgICAgIGUyZTogZmlsZVN5c3RlbS5wYXRoQ29tYmluZSh0aGlzLnd3d1Jvb3RGb2xkZXIsIFwidGVzdC9lMmUvc3JjXCIpLFxuICAgICAgICAgICAgZTJlRGlzdDogZmlsZVN5c3RlbS5wYXRoQ29tYmluZSh0aGlzLnd3d1Jvb3RGb2xkZXIsIFwidGVzdC9lMmUvZGlzdFwiKSxcbiAgICAgICAgICAgIHVuaXRSb290OiBmaWxlU3lzdGVtLnBhdGhDb21iaW5lKHRoaXMud3d3Um9vdEZvbGRlciwgXCJ0ZXN0L3VuaXRcIiksXG4gICAgICAgICAgICB1bml0OiBmaWxlU3lzdGVtLnBhdGhDb21iaW5lKHRoaXMud3d3Um9vdEZvbGRlciwgXCJ0ZXN0L3VuaXQvc3JjXCIpLFxuICAgICAgICAgICAgdW5pdERpc3Q6IGZpbGVTeXN0ZW0ucGF0aENvbWJpbmUodGhpcy53d3dSb290Rm9sZGVyLCBcInRlc3QvdW5pdC9kaXN0XCIpLFxuICAgICAgICAgICAgcmVwb3J0czogZmlsZVN5c3RlbS5wYXRoQ29tYmluZSh0aGlzLnd3d1Jvb3RGb2xkZXIsIFwidGVzdC9yZXBvcnRzXCIpLFxuICAgICAgICAgICAgYXNzZXRzOiBmaWxlU3lzdGVtLnBhdGhDb21iaW5lKHRoaXMud3d3Um9vdEZvbGRlciwgXCJhc3NldHNcIiksXG4gICAgICAgICAgICBhc3NldHNTcmM6IGZpbGVTeXN0ZW0ucGF0aENvbWJpbmUodGhpcy53d3dSb290Rm9sZGVyLCBcImFzc2V0c1NyY1wiKSxcbiAgICAgICAgICAgIGJ1aWxkOiBmaWxlU3lzdGVtLnBhdGhDb21iaW5lKHRoaXMud3d3Um9vdEZvbGRlciwgXCJidWlsZFwiKSxcbiAgICAgICAgICAgIHBhY2thZ2U6IGZpbGVTeXN0ZW0ucGF0aENvbWJpbmUodGhpcy53d3dSb290Rm9sZGVyLCBcIm5vZGVfbW9kdWxlc1wiKSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYXRpb246IGZpbGVTeXN0ZW0ucGF0aENvbWJpbmUodGhpcy53d3dSb290Rm9sZGVyLCBcImNvbmZpZ3VyYXRpb25cIilcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBwdWJsaWMgaW5pdGlhbGlzZVBhY2thZ2VzKGNsaWVudFBhY2thZ2VzOiB7IFtpZDogc3RyaW5nXTogVW5pdGVDbGllbnRQYWNrYWdlIH0pOiB2b2lkIHtcbiAgICAgICAgdGhpcy5fZXhpc3RpbmdDbGllbnRQYWNrYWdlcyA9IGNsaWVudFBhY2thZ2VzO1xuICAgIH1cblxuICAgIHB1YmxpYyB0b2dnbGVDbGllbnRQYWNrYWdlKGtleTogc3RyaW5nLCBjbGllbnRQYWNrYWdlOiBVbml0ZUNsaWVudFBhY2thZ2UsIHJlcXVpcmVkOiBib29sZWFuKTogdm9pZCB7XG4gICAgICAgIGlmIChyZXF1aXJlZCkge1xuICAgICAgICAgICAgdGhpcy5hZGRDbGllbnRQYWNrYWdlKGtleSwgY2xpZW50UGFja2FnZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnJlbW92ZUNsaWVudFBhY2thZ2Uoa2V5LCBjbGllbnRQYWNrYWdlKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHB1YmxpYyBhZGRDbGllbnRQYWNrYWdlKGtleTogc3RyaW5nLCBjbGllbnRQYWNrYWdlOiBVbml0ZUNsaWVudFBhY2thZ2UpOiB2b2lkIHtcbiAgICAgICAgaWYgKCFjbGllbnRQYWNrYWdlLnZlcnNpb24pIHtcbiAgICAgICAgICAgIGNsaWVudFBhY2thZ2UudmVyc2lvbiA9IHRoaXMuZmluZERlcGVuZGVuY3lWZXJzaW9uKGNsaWVudFBhY2thZ2UubmFtZSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fcmVxdWlyZWRDbGllbnRQYWNrYWdlc1trZXldID0gY2xpZW50UGFja2FnZTtcbiAgICB9XG5cbiAgICBwdWJsaWMgcmVtb3ZlQ2xpZW50UGFja2FnZShrZXk6IHN0cmluZywgY2xpZW50UGFja2FnZTogVW5pdGVDbGllbnRQYWNrYWdlKTogdm9pZCB7XG4gICAgICAgIHRoaXMuX3JlbW92ZWRDbGllbnRQYWNrYWdlc1trZXldID0gY2xpZW50UGFja2FnZTtcbiAgICB9XG5cbiAgICBwdWJsaWMgdG9nZ2xlRGV2RGVwZW5kZW5jeShkZXBlbmRlbmNpZXM6IHN0cmluZ1tdLCByZXF1aXJlZDogYm9vbGVhbik6IHZvaWQge1xuICAgICAgICBpZiAocmVxdWlyZWQpIHtcbiAgICAgICAgICAgIHRoaXMuYWRkRGV2RGVwZW5kZW5jeShkZXBlbmRlbmNpZXMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5yZW1vdmVEZXZEZXBlbmRlbmN5KGRlcGVuZGVuY2llcyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwdWJsaWMgYWRkRGV2RGVwZW5kZW5jeShkZXBlbmRlbmNpZXM6IHN0cmluZ1tdKTogdm9pZCB7XG4gICAgICAgIGRlcGVuZGVuY2llcy5mb3JFYWNoKGRlcCA9PiB7XG4gICAgICAgICAgICBjb25zdCBjbGllbnRQYWNrYWdlID0gbmV3IFVuaXRlQ2xpZW50UGFja2FnZSgpO1xuICAgICAgICAgICAgY2xpZW50UGFja2FnZS5uYW1lID0gZGVwO1xuICAgICAgICAgICAgdGhpcy5fcmVxdWlyZWREZXZEZXBlbmRlbmNpZXNbZGVwXSA9IGNsaWVudFBhY2thZ2U7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHB1YmxpYyByZW1vdmVEZXZEZXBlbmRlbmN5KGRlcGVuZGVuY2llczogc3RyaW5nW10pOiB2b2lkIHtcbiAgICAgICAgZGVwZW5kZW5jaWVzLmZvckVhY2goZGVwID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGNsaWVudFBhY2thZ2UgPSBuZXcgVW5pdGVDbGllbnRQYWNrYWdlKCk7XG4gICAgICAgICAgICBjbGllbnRQYWNrYWdlLm5hbWUgPSBkZXA7XG4gICAgICAgICAgICB0aGlzLl9yZW1vdmVkRGV2RGVwZW5kZW5jaWVzW2RlcF0gPSBjbGllbnRQYWNrYWdlO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBwdWJsaWMgYWRkVmVyc2lvbmVkRGV2RGVwZW5kZW5jeShkZXBlbmRlbmN5OiBzdHJpbmcsIHZlcnNpb246IHN0cmluZyk6IHZvaWQge1xuICAgICAgICBjb25zdCBjbGllbnRQYWNrYWdlID0gbmV3IFVuaXRlQ2xpZW50UGFja2FnZSgpO1xuICAgICAgICBjbGllbnRQYWNrYWdlLm5hbWUgPSBkZXBlbmRlbmN5O1xuICAgICAgICBjbGllbnRQYWNrYWdlLnZlcnNpb24gPSB2ZXJzaW9uO1xuICAgICAgICB0aGlzLl9yZXF1aXJlZERldkRlcGVuZGVuY2llc1tkZXBlbmRlbmN5XSA9IGNsaWVudFBhY2thZ2U7XG4gICAgfVxuXG4gICAgcHVibGljIGJ1aWxkRGVwZW5kZW5jaWVzKHVuaXRlQ29uZmlndXJhdGlvbjogVW5pdGVDb25maWd1cmF0aW9uLCBwYWNrYWdlSnNvbkRlcGVuZGVuY2llczogeyBbaWQ6IHN0cmluZ106IHN0cmluZyB9KTogdm9pZCB7XG4gICAgICAgIGZvciAoY29uc3Qga2V5IGluIHRoaXMuX3JlbW92ZWRDbGllbnRQYWNrYWdlcykge1xuICAgICAgICAgICAgY29uc3QgcGtnID0gdGhpcy5fcmVtb3ZlZENsaWVudFBhY2thZ2VzW2tleV07XG5cbiAgICAgICAgICAgIGlmIChwYWNrYWdlSnNvbkRlcGVuZGVuY2llc1twa2cubmFtZV0pIHtcbiAgICAgICAgICAgICAgICBkZWxldGUgcGFja2FnZUpzb25EZXBlbmRlbmNpZXNbcGtnLm5hbWVdO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAodGhpcy5fZXhpc3RpbmdDbGllbnRQYWNrYWdlc1trZXldICYmXG4gICAgICAgICAgICAgICAgIXRoaXMuX2V4aXN0aW5nQ2xpZW50UGFja2FnZXNba2V5XS5oYXNPdmVycmlkZXMpIHtcbiAgICAgICAgICAgICAgICBkZWxldGUgdGhpcy5fZXhpc3RpbmdDbGllbnRQYWNrYWdlc1trZXldO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gdGhpcy5fZXhpc3RpbmdDbGllbnRQYWNrYWdlcykge1xuICAgICAgICAgICAgY29uc3QgcGtnID0gdGhpcy5fZXhpc3RpbmdDbGllbnRQYWNrYWdlc1trZXldO1xuXG4gICAgICAgICAgICBpZiAocGtnLmhhc092ZXJyaWRlcyB8fCAhdGhpcy5fcmVxdWlyZWRDbGllbnRQYWNrYWdlc1trZXldKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fcmVxdWlyZWRDbGllbnRQYWNrYWdlc1trZXldID0gcGtnO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgYWRkZWREZXZEZXBlbmRlbmNpZXMgPSBbXTtcbiAgICAgICAgY29uc3QgcmVtb3ZlZERldkRlcGVuZGVuY2llcyA9IFtdO1xuICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiB0aGlzLl9yZXF1aXJlZENsaWVudFBhY2thZ2VzKSB7XG4gICAgICAgICAgICBjb25zdCBwa2cgPSB0aGlzLl9yZXF1aXJlZENsaWVudFBhY2thZ2VzW2tleV07XG5cbiAgICAgICAgICAgIHVuaXRlQ29uZmlndXJhdGlvbi5jbGllbnRQYWNrYWdlc1trZXldID0gcGtnO1xuICAgICAgICAgICAgaWYgKHBrZy5pbmNsdWRlTW9kZSA9PT0gdW5kZWZpbmVkIHx8IHBrZy5pbmNsdWRlTW9kZSA9PT0gXCJhcHBcIiB8fCBwa2cuaW5jbHVkZU1vZGUgPT09IFwiYm90aFwiKSB7XG4gICAgICAgICAgICAgICAgcGFja2FnZUpzb25EZXBlbmRlbmNpZXNbcGtnLm5hbWVdID0gcGtnLnZlcnNpb247XG5cbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fcmVxdWlyZWREZXZEZXBlbmRlbmNpZXNbcGtnLm5hbWVdKSB7XG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSB0aGlzLl9yZXF1aXJlZERldkRlcGVuZGVuY2llc1twa2cubmFtZV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJlbW92ZWREZXZEZXBlbmRlbmNpZXMucHVzaChwa2cubmFtZSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGFkZGVkRGV2RGVwZW5kZW5jaWVzLnB1c2gocGtnLm5hbWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMudG9nZ2xlRGV2RGVwZW5kZW5jeShhZGRlZERldkRlcGVuZGVuY2llcywgdHJ1ZSk7XG4gICAgICAgIHRoaXMudG9nZ2xlRGV2RGVwZW5kZW5jeShyZW1vdmVkRGV2RGVwZW5kZW5jaWVzLCBmYWxzZSk7XG4gICAgfVxuXG4gICAgcHVibGljIGJ1aWxkRGV2RGVwZW5kZW5jaWVzKHBhY2thZ2VKc29uRGV2RGVwZW5kZW5jaWVzOiB7IFtpZDogc3RyaW5nXTogc3RyaW5nIH0pOiB2b2lkIHtcbiAgICAgICAgT2JqZWN0LmtleXModGhpcy5fcmVtb3ZlZERldkRlcGVuZGVuY2llcylcbiAgICAgICAgICAgIC5mb3JFYWNoKGRlcGVuZGVuY3kgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChwYWNrYWdlSnNvbkRldkRlcGVuZGVuY2llc1tkZXBlbmRlbmN5XSkge1xuICAgICAgICAgICAgICAgICAgICBkZWxldGUgcGFja2FnZUpzb25EZXZEZXBlbmRlbmNpZXNbZGVwZW5kZW5jeV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgT2JqZWN0LmtleXModGhpcy5fcmVxdWlyZWREZXZEZXBlbmRlbmNpZXMpXG4gICAgICAgICAgICAuZm9yRWFjaChyZXF1aXJlZERlcGVuZGVuY3kgPT4ge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9yZXF1aXJlZERldkRlcGVuZGVuY2llc1tyZXF1aXJlZERlcGVuZGVuY3ldLnZlcnNpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgcGFja2FnZUpzb25EZXZEZXBlbmRlbmNpZXNbcmVxdWlyZWREZXBlbmRlbmN5XSA9IHRoaXMuX3JlcXVpcmVkRGV2RGVwZW5kZW5jaWVzW3JlcXVpcmVkRGVwZW5kZW5jeV0udmVyc2lvbjtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBwYWNrYWdlSnNvbkRldkRlcGVuZGVuY2llc1tyZXF1aXJlZERlcGVuZGVuY3ldID0gdGhpcy5maW5kRGVwZW5kZW5jeVZlcnNpb24ocmVxdWlyZWREZXBlbmRlbmN5KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZmluZERlcGVuZGVuY3lWZXJzaW9uKHJlcXVpcmVkRGVwZW5kZW5jeTogc3RyaW5nKTogc3RyaW5nIHtcbiAgICAgICAgaWYgKHRoaXMuZW5naW5lRGVwZW5kZW5jaWVzKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5lbmdpbmVEZXBlbmRlbmNpZXNbcmVxdWlyZWREZXBlbmRlbmN5XSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmVuZ2luZURlcGVuZGVuY2llc1tyZXF1aXJlZERlcGVuZGVuY3ldO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYE1pc3NpbmcgRGVwZW5kZW5jeSAnJHtyZXF1aXJlZERlcGVuZGVuY3l9J2ApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiRGVwZW5kZW5jeSBWZXJzaW9ucyBtaXNzaW5nXCIpO1xuICAgICAgICB9XG4gICAgfVxufVxuIl19
