"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Generate Command
 */
const objectHelper_1 = require("unitejs-framework/dist/helpers/objectHelper");
const parameterValidation_1 = require("unitejs-framework/dist/helpers/parameterValidation");
const engineCommandBase_1 = require("../engine/engineCommandBase");
const engineVariables_1 = require("../engine/engineVariables");
const templateHelper_1 = require("../helpers/templateHelper");
class GenerateCommand extends engineCommandBase_1.EngineCommandBase {
    run(args) {
        const _super = name => super[name];
        return __awaiter(this, void 0, void 0, function* () {
            const uniteConfiguration = yield this.loadConfiguration(args.outputDirectory, undefined, undefined, false);
            if (!uniteConfiguration) {
                this._logger.error("There is no unite.json to use for configuration.");
                return 1;
            }
            if (!parameterValidation_1.ParameterValidation.notEmpty(this._logger, "name", args.name)) {
                return 1;
            }
            if (!parameterValidation_1.ParameterValidation.notEmpty(this._logger, "type", args.type)) {
                return 1;
            }
            this._logger.info("");
            try {
                const engineVariables = new engineVariables_1.EngineVariables();
                _super("createEngineVariables").call(this, args.outputDirectory, uniteConfiguration, engineVariables);
                const generateTemplatesFolder = this._fileSystem.pathCombine(this._engineAssetsFolder, `appFramework/${uniteConfiguration.applicationFramework.toLowerCase()}/generate/`);
                const exists = yield this._fileSystem.fileExists(generateTemplatesFolder, "generate-templates.json");
                if (exists) {
                    const generateTemplates = yield this._fileSystem.fileReadJson(generateTemplatesFolder, "generate-templates.json");
                    const keys = Object.keys(generateTemplates);
                    const typeLower = args.type.toLowerCase();
                    const templateKey = keys.find(k => k.toLowerCase() === typeLower);
                    if (templateKey) {
                        let template = generateTemplates[templateKey];
                        const sharedGenerateTemplatesFolder = this._fileSystem.pathCombine(this._engineAssetsFolder, `appFramework/shared/generate/`);
                        if (generateTemplates[templateKey].isShared) {
                            const sharedExists = yield this._fileSystem.fileExists(sharedGenerateTemplatesFolder, "generate-templates.json");
                            if (sharedExists) {
                                const sharedGenerateTemplates = yield this._fileSystem.fileReadJson(sharedGenerateTemplatesFolder, "generate-templates.json");
                                if (sharedGenerateTemplates[templateKey]) {
                                    template = objectHelper_1.ObjectHelper.merge(template, sharedGenerateTemplates[templateKey]);
                                }
                                else {
                                    this._logger.error(`Can not find a type of '${args.type}' in the shared templates'`);
                                    return 1;
                                }
                            }
                            else {
                                this._logger.error(`There are no shared generate-templates and shared template '${args.type}' is required`);
                                return 1;
                            }
                        }
                        // need this for synthetic import flags
                        this._pipeline.add("moduleType", "CommonJS");
                        this._pipeline.add("moduleType", "SystemJS");
                        this._pipeline.add("moduleType", "AMD");
                        let ret = yield this._pipeline.run(uniteConfiguration, engineVariables, ["initialise"], false);
                        if (ret === 0) {
                            ret = yield this.generateFromTemplate(args, uniteConfiguration, engineVariables, generateTemplates[templateKey].isShared ? sharedGenerateTemplatesFolder : generateTemplatesFolder, template);
                        }
                        return ret;
                    }
                    else {
                        this._logger.error(`Can not find a type of '${args.type}' for applicationFramework '${uniteConfiguration.applicationFramework}, possible values are [${keys.join(", ")}]'`);
                        return 1;
                    }
                }
                else {
                    this._logger.error(`There are no generate-templates for applicationFramework '${uniteConfiguration.applicationFramework}'`);
                    return 1;
                }
            }
            catch (err) {
                this._logger.error(`There was an error loading generate-templates for applicationFramework '${uniteConfiguration.applicationFramework}'`, err);
                return 1;
            }
        });
    }
    generateFromTemplate(args, uniteConfiguration, engineVariables, generateTemplatesFolder, generateTemplate) {
        return __awaiter(this, void 0, void 0, function* () {
            const substitutions = Object.assign(templateHelper_1.TemplateHelper.generateSubstitutions(args.name), templateHelper_1.TemplateHelper.createCodeSubstitutions(engineVariables));
            // See where we are in relation to the www folder
            const baseDirectory = this._fileSystem.pathAbsolute("./");
            const wwwFolder = this._fileSystem.pathAbsolute(this._fileSystem.pathCombine(args.outputDirectory, uniteConfiguration.dirs.wwwRoot));
            const srcFolder = this._fileSystem.pathAbsolute(this._fileSystem.pathCombine(wwwFolder, uniteConfiguration.dirs.www.src));
            // If we are somewhere in the srcFolder use that as a starting point, otherwise just use src root
            const startSrcFolder = baseDirectory.startsWith(srcFolder) ? baseDirectory : srcFolder;
            // Calculate any subFolder based on arg or default with substitutions
            const subFolder = args.subFolder !== undefined && args.subFolder !== null ? args.subFolder :
                generateTemplate.defaultFolder !== undefined && generateTemplate.defaultFolder !== null ? templateHelper_1.TemplateHelper.replaceSubstitutions(substitutions, generateTemplate.defaultFolder) : "";
            // Now combine the output folder
            const srcOutputFolder = this._fileSystem.pathCombine(startSrcFolder, subFolder);
            // Find the relativee from srcFolder to srcOutputFolder so we can combine for other folder structures
            const srcRelative = this._fileSystem.pathFileRelative(srcFolder, srcOutputFolder);
            let ret = yield this.copyFiles(generateTemplatesFolder, generateTemplate.sourceFiles, srcOutputFolder, `${args.type}/src`, uniteConfiguration.sourceExtensions, substitutions);
            if (ret === 0) {
                ret = yield this.copyFiles(generateTemplatesFolder, generateTemplate.viewFiles, srcOutputFolder, `${args.type}/view`, uniteConfiguration.viewExtensions, substitutions);
            }
            if (ret === 0) {
                ret = yield this.copyFiles(generateTemplatesFolder, generateTemplate.styleFiles, srcOutputFolder, `${args.type}/style`, [uniteConfiguration.styleExtension], substitutions);
            }
            if (ret === 0 && uniteConfiguration.unitTestRunner !== "None") {
                const unitSrcFolder = this._fileSystem.pathAbsolute(this._fileSystem.pathCombine(wwwFolder, uniteConfiguration.dirs.www.unitTestSrc));
                const unitSrcOutputFolder = this._fileSystem.pathCombine(unitSrcFolder, srcRelative);
                substitutions[`../../src/`] = this._fileSystem.pathToWeb(this._fileSystem.pathDirectoryRelative(unitSrcOutputFolder, srcOutputFolder))
                    .replace(/^\.\//, "");
                ret = yield this.copyFiles(generateTemplatesFolder, generateTemplate.unitTestFiles, unitSrcOutputFolder, `${args.type}/unit/${uniteConfiguration.unitTestFramework.toLowerCase()}`, uniteConfiguration.sourceExtensions, substitutions);
            }
            if (ret === 0 && uniteConfiguration.e2eTestRunner !== "None") {
                const e2eSrcFolder = this._fileSystem.pathAbsolute(this._fileSystem.pathCombine(wwwFolder, uniteConfiguration.dirs.www.e2eTestSrc));
                const e2eSrcOutputFolder = this._fileSystem.pathCombine(e2eSrcFolder, srcRelative);
                substitutions[`../../src`] = this._fileSystem.pathToWeb(this._fileSystem.pathDirectoryRelative(e2eSrcOutputFolder, srcOutputFolder))
                    .replace(/^\.\//, "");
                ret = yield this.copyFiles(generateTemplatesFolder, generateTemplate.e2eTestFiles, e2eSrcOutputFolder, `${args.type}/e2e/${uniteConfiguration.unitTestFramework.toLowerCase()}`, uniteConfiguration.sourceExtensions, substitutions);
            }
            if (ret === 0) {
                this.displayCompletionMessage(engineVariables, false);
            }
            return ret;
        });
    }
    copyFiles(generateTemplatesFolder, filenames, destFolder, templateSubFolder, possibleExtensions, substitutions) {
        return __awaiter(this, void 0, void 0, function* () {
            if (filenames && filenames.length > 0) {
                const srcFolder = this._fileSystem.pathCombine(generateTemplatesFolder, templateSubFolder);
                for (let i = 0; i < filenames.length; i++) {
                    const srcFilename = filenames[i];
                    let doneCopy = false;
                    for (let j = 0; j < possibleExtensions.length && !doneCopy; j++) {
                        const srcFilename2 = `${srcFilename}.${possibleExtensions[j]}`;
                        const destFilename = `${templateHelper_1.TemplateHelper.replaceSubstitutions(substitutions, srcFilename)}.${possibleExtensions[j]}`;
                        try {
                            const destExists = yield this._fileSystem.fileExists(destFolder, destFilename);
                            if (destExists) {
                                this._logger.error(`Destination file exists, aborting`, undefined, { srcFolder, srcFilename2, destFolder, destFilename });
                                return 1;
                            }
                            else {
                                const exists = yield this._fileSystem.fileExists(srcFolder, srcFilename2);
                                if (exists) {
                                    let content = yield this._fileSystem.fileReadText(srcFolder, srcFilename2);
                                    if (content.startsWith("!")) {
                                        this._logger.error(content.substr(1));
                                        return 1;
                                    }
                                    else {
                                        content = templateHelper_1.TemplateHelper.replaceSubstitutions(substitutions, content);
                                        yield this._fileSystem.directoryCreate(destFolder);
                                        this._logger.info(`Writing ${this._fileSystem.pathCombine(destFolder, destFilename)}`);
                                        yield this._fileSystem.fileWriteText(destFolder, destFilename, content);
                                        doneCopy = true;
                                    }
                                }
                            }
                        }
                        catch (err) {
                            this._logger.error(`There was an generating from the template`, err, { srcFolder, srcFilename2, destFolder, destFilename });
                            return 1;
                        }
                    }
                    if (!doneCopy) {
                        this._logger.error(`Can not find a source for '${srcFilename}' with the possible extensions [${possibleExtensions.join(", ")}]`);
                        return 1;
                    }
                }
            }
            return 0;
        });
    }
}
exports.GenerateCommand = GenerateCommand;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
