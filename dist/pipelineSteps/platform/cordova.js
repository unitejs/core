"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Pipeline step to generate cordova platform configuration.
 */
const arrayHelper_1 = require("unitejs-framework/dist/helpers/arrayHelper");
const pipelineStepBase_1 = require("../../engine/pipelineStepBase");
class Cordova extends pipelineStepBase_1.PipelineStepBase {
    mainCondition(uniteConfiguration, engineVariables) {
        return super.objectCondition(uniteConfiguration.platforms, Cordova.PLATFORM);
    }
    configure(logger, fileSystem, uniteConfiguration, engineVariables, mainCondition) {
        const _super = name => super[name];
        return __awaiter(this, void 0, void 0, function* () {
            engineVariables.toggleDevDependency(["xml2js"], mainCondition && _super("condition").call(this, uniteConfiguration.taskManager, "Gulp"));
            const uniteThemeConfiguration = engineVariables.getConfiguration("UniteTheme");
            if (uniteThemeConfiguration) {
                if (mainCondition) {
                    uniteThemeConfiguration.cordova = uniteThemeConfiguration.cordova || [];
                    arrayHelper_1.ArrayHelper.addRemove(uniteThemeConfiguration.cordova, "<meta http-equiv=\"Content-Security-Policy\" content=\"default-src 'self' data: gap: https://ssl.gstatic.com " +
                        "'unsafe-eval' 'unsafe-inline'; style-src 'self' 'unsafe-inline'; media-src *; img-src 'self' data: content:;\">", mainCondition, (obj, item) => item.indexOf("Content-Security-Policy") >= 0);
                    arrayHelper_1.ArrayHelper.addRemove(uniteThemeConfiguration.cordova, "<meta name=\"format-detection\" content=\"telephone=no\">", mainCondition, (obj, item) => item.indexOf("format-detection") >= 0);
                    arrayHelper_1.ArrayHelper.addRemove(uniteThemeConfiguration.cordova, "<meta name=\"msapplication-tap-highlight\" content=\"no\">", mainCondition, (obj, item) => item.indexOf("msapplication-tap-highlight") >= 0);
                    arrayHelper_1.ArrayHelper.addRemove(uniteThemeConfiguration.cordova, "<script type=\"text/javascript\" src=\"./cordova.js\"></script>", mainCondition, (obj, item) => item.indexOf("cordova.js") >= 0);
                }
                else {
                    delete uniteThemeConfiguration.cordova;
                }
            }
            return 0;
        });
    }
    finalise(logger, fileSystem, uniteConfiguration, engineVariables, mainCondition) {
        const _super = name => super[name];
        return __awaiter(this, void 0, void 0, function* () {
            let ret = yield _super("folderCreate").call(this, logger, fileSystem, engineVariables.platformRootFolder);
            if (ret === 0) {
                const buildTasks = fileSystem.pathCombine(engineVariables.www.build, "/tasks/");
                const buildAssetPlatform = fileSystem.pathCombine(engineVariables.www.build, "/assets/platform/cordova/");
                if (mainCondition && _super("condition").call(this, uniteConfiguration.taskManager, "Gulp")) {
                    const assetTasksPlatform = fileSystem.pathCombine(engineVariables.engineAssetsFolder, "gulp/dist/tasks/platform/");
                    ret = yield this.copyFile(logger, fileSystem, assetTasksPlatform, Cordova.FILENAME, buildTasks, Cordova.FILENAME, engineVariables.force, false, { "\\\"../util/": ["\"./util/"] });
                    const assetPlatform = fileSystem.pathCombine(engineVariables.engineAssetsFolder, "gulp/assets/platform/cordova/");
                    if (ret === 0) {
                        ret = yield this.copyFile(logger, fileSystem, assetPlatform, Cordova.FILENAME_PROJ, buildAssetPlatform, Cordova.FILENAME_PROJ, engineVariables.force, false);
                    }
                }
                else {
                    ret = yield _super("fileDeleteText").call(this, logger, fileSystem, buildTasks, Cordova.FILENAME, engineVariables.force);
                    if (ret === 0) {
                        ret = yield _super("fileDeleteText").call(this, logger, fileSystem, buildAssetPlatform, Cordova.FILENAME_PROJ, engineVariables.force);
                    }
                }
            }
            if (mainCondition) {
                engineVariables.additionalCompletionMessages.push("Make sure you have installed the cordova package globally using:");
                engineVariables.additionalCompletionMessages.push(`   ${engineVariables.packageManager.getInstallCommand("cordova", true)}`);
            }
            return ret;
        });
    }
}
Cordova.PLATFORM = "Cordova";
Cordova.FILENAME = "platform-cordova.js";
Cordova.FILENAME_PROJ = "cordova.jsproj";
exports.Cordova = Cordova;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
