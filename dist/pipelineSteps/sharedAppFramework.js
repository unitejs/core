"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const pipelineStepBase_1 = require("../engine/pipelineStepBase");
const templateHelper_1 = require("../helpers/templateHelper");
class SharedAppFramework extends pipelineStepBase_1.PipelineStepBase {
    generateAppSource(logger, fileSystem, uniteConfiguration, engineVariables, files, isShared) {
        return __awaiter(this, void 0, void 0, function* () {
            const appFramework = isShared ? "shared" : uniteConfiguration.applicationFramework.toLowerCase();
            const scaffoldFolder = fileSystem.pathCombine(engineVariables.engineAssetsFolder, `appFramework/${appFramework}/src/${uniteConfiguration.sourceLanguage.toLowerCase()}`);
            logger.info("Generating App Source in", { appSourceFolder: engineVariables.www.src });
            for (const file of files) {
                const ret = yield this.copyFile(logger, fileSystem, scaffoldFolder, file, engineVariables.www.src, file, engineVariables.force, engineVariables.noCreateSource, templateHelper_1.TemplateHelper.createCodeSubstitutions(engineVariables));
                if (ret !== 0) {
                    return ret;
                }
            }
            return 0;
        });
    }
    generateAppHtml(logger, fileSystem, uniteConfiguration, engineVariables, htmlFiles) {
        return __awaiter(this, void 0, void 0, function* () {
            const scaffoldFolder = fileSystem.pathCombine(engineVariables.engineAssetsFolder, `appFramework/${uniteConfiguration.applicationFramework.toLowerCase()}/src/html/`);
            logger.info("Generating App HTML in", { appSourceFolder: engineVariables.www.src });
            for (const htmlFile of htmlFiles) {
                const ret = yield this.copyFile(logger, fileSystem, scaffoldFolder, `${htmlFile}`, engineVariables.www.src, `${htmlFile}`, engineVariables.force, engineVariables.noCreateSource);
                if (ret !== 0) {
                    return ret;
                }
            }
            return 0;
        });
    }
    generateAppCss(logger, fileSystem, uniteConfiguration, engineVariables, cssFiles) {
        return __awaiter(this, void 0, void 0, function* () {
            const scaffoldFolder = fileSystem.pathCombine(engineVariables.engineAssetsFolder, `appFramework/${uniteConfiguration.applicationFramework.toLowerCase()}/src/css/${uniteConfiguration.cssPre.toLowerCase()}/`);
            logger.info("Generating App CSS in", { appSourceFolder: engineVariables.www.src });
            for (const cssFile of cssFiles) {
                const ret = yield this.copyFile(logger, fileSystem, scaffoldFolder, `${cssFile}.${uniteConfiguration.styleExtension}`, engineVariables.www.src, `${cssFile}.${uniteConfiguration.styleExtension}`, engineVariables.force, engineVariables.noCreateSource);
                if (ret !== 0) {
                    return ret;
                }
            }
            return 0;
        });
    }
    generateUnitTest(logger, fileSystem, uniteConfiguration, engineVariables, specs, isShared) {
        const _super = name => super[name];
        return __awaiter(this, void 0, void 0, function* () {
            if (!_super("condition").call(this, uniteConfiguration.unitTestRunner, "None")) {
                logger.info("Generating unit test scaffold shared", { unitTestSrcFolder: engineVariables.www.unit });
                const appFramework = isShared ? "shared" : uniteConfiguration.applicationFramework.toLowerCase();
                const unitTestsScaffold = fileSystem.pathCombine(engineVariables.engineAssetsFolder, `appFramework/${appFramework}/test/unit/src/sourceLanguage/${uniteConfiguration.sourceLanguage.toLowerCase()}/` +
                    `${uniteConfiguration.unitTestFramework.toLowerCase()}/`);
                const unitTestsRunner = fileSystem.pathCombine(engineVariables.engineAssetsFolder, `appFramework/shared/test/unit/unitTestRunner/${uniteConfiguration.unitTestRunner.toLowerCase()}/`);
                for (const spec of specs) {
                    const ret = yield this.copyFile(logger, fileSystem, unitTestsScaffold, `${spec}`, engineVariables.www.unit, `${spec}`, engineVariables.force, engineVariables.noCreateSource, templateHelper_1.TemplateHelper.createCodeSubstitutions(engineVariables));
                    if (ret !== 0) {
                        return ret;
                    }
                }
                return this.copyFile(logger, fileSystem, unitTestsRunner, "unit-bootstrap.js", engineVariables.www.unitRoot, "unit-bootstrap.js", engineVariables.force, engineVariables.noCreateSource);
            }
            else {
                return 0;
            }
        });
    }
    generateE2eTest(logger, fileSystem, uniteConfiguration, engineVariables, specs, isShared) {
        const _super = name => super[name];
        return __awaiter(this, void 0, void 0, function* () {
            if (!_super("condition").call(this, uniteConfiguration.e2eTestRunner, "None")) {
                logger.info("Generating e2e test scaffold shared", { unitTestSrcFolder: engineVariables.www.e2e });
                const appFramework = isShared ? "shared" : uniteConfiguration.applicationFramework.toLowerCase();
                const e2eTestsScaffold = fileSystem.pathCombine(engineVariables.engineAssetsFolder, `appFramework/${appFramework}/test/e2e/src/` +
                    `${uniteConfiguration.e2eTestRunner.toLowerCase()}/` +
                    `${uniteConfiguration.e2eTestFramework.toLowerCase()}/`);
                for (const spec of specs) {
                    const ret = yield this.copyFile(logger, fileSystem, e2eTestsScaffold, `${spec}`, engineVariables.www.e2e, `${spec}`, engineVariables.force, engineVariables.noCreateSource);
                    if (ret !== 0) {
                        return ret;
                    }
                }
                return 0;
            }
            else {
                return 0;
            }
        });
    }
    generateCss(logger, fileSystem, uniteConfiguration, engineVariables) {
        const _super = name => super[name];
        return __awaiter(this, void 0, void 0, function* () {
            logger.info("Generating application css scaffold shared", { cssSrcFolder: engineVariables.www.css });
            const assetCssFolder = fileSystem.pathCombine(engineVariables.engineAssetsFolder, `appFramework/shared/css/${uniteConfiguration.cssPre.toLowerCase()}`);
            const styles = ["app", "main", "reset"];
            for (const style of styles) {
                const ret = yield _super("copyFile").call(this, logger, fileSystem, assetCssFolder, `${style}.${uniteConfiguration.styleExtension}`, engineVariables.www.css, `${style}.${uniteConfiguration.styleExtension}`, engineVariables.force, engineVariables.noCreateSource);
                if (ret !== 0) {
                    return ret;
                }
            }
            return 0;
        });
    }
    createLoaderReplacement(engineVariables, extension, loader, includeRequires) {
        if (includeRequires) {
            engineVariables.buildTranspileInclude.push("const replace = require(\"gulp-replace\");");
        }
        engineVariables.buildTranspilePreBuild.push(`        .pipe(replace(/import(.*?)("|'|\`)(.*?).${extension}\\2/g, "import$1$2${loader}!$3.${extension}$2"))`);
    }
    createLoaderTypeMapReplacement(engineVariables, extension, loader) {
        engineVariables.buildTranspileInclude.push("const replace = require(\"gulp-replace\");");
        engineVariables.buildTranspileInclude.push("const clientPackages = require(\"./util/client-packages\");");
        const typeMapLoader = `\${clientPackages.getTypeMap(uniteConfig, "${loader}", buildConfiguration.minify)}`;
        engineVariables.buildTranspilePreBuild.push(`        .pipe(replace(/import(.*?)("|'|\`)(.*?).${extension}\\2/g, \`import$1$2${typeMapLoader}!$3.${extension}$2\`))`);
    }
    insertContent(logger, fileSystem, engineVariables, file, inserter) {
        return __awaiter(this, void 0, void 0, function* () {
            let ret = 0;
            try {
                const fileExists = yield fileSystem.fileExists(engineVariables.www.src, file);
                if (fileExists) {
                    let content = yield fileSystem.fileReadText(engineVariables.www.src, file);
                    content = inserter(content);
                    yield fileSystem.fileWriteText(engineVariables.www.src, file, content);
                }
            }
            catch (err) {
                ret = 1;
                logger.error(`Unable to replace content in file '${file}'`, err);
            }
            return ret;
        });
    }
    insertReplaceImports(srcContent, sourceItems) {
        let items = sourceItems;
        let content = srcContent;
        let remaining = [];
        if (items && items.length > 0) {
            const regEx = /(import.*;)/g;
            const results = content.match(regEx);
            if (results && results.length > 0) {
                items = items.filter(it => results.indexOf(it) < 0);
                if (items.length > 0) {
                    content = content.replace(results[results.length - 1], `${results[results.length - 1]}\n${items.join("\n")}`);
                }
            }
            else {
                remaining = items;
            }
        }
        return { content, remaining };
    }
    insertCompletion(logger, remainingInserts, routes) {
        const keys = Object.keys(remainingInserts || {});
        let totalRemaining = 0;
        keys.forEach(key => {
            totalRemaining += remainingInserts[key].length;
        });
        if (totalRemaining > 0) {
            logger.banner("");
            logger.banner("------------------------------------------------------------------------");
            logger.warning("We couldn't find a location to insert some of the router data, please insert the following manually:");
            logger.warning("");
            keys.forEach(key => {
                if (remainingInserts[key].length > 0) {
                    logger.banner(key);
                    logger.banner("");
                    remainingInserts[key].forEach(item => logger.banner(`   ${item.replace(/\n/g, "\n   ")}`));
                    logger.banner("");
                }
            });
            logger.banner("------------------------------------------------------------------------");
            logger.banner("");
        }
        if (routes && routes.length > 0) {
            logger.banner("Once you have built the application you should be able access the new pages at the following routes:");
            logger.banner("");
            routes.forEach(route => logger.banner(`   ${route}`));
            logger.banner("");
        }
    }
}
exports.SharedAppFramework = SharedAppFramework;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
