"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Pipeline step to generate scaffolding for React application.
 */
const arrayHelper_1 = require("unitejs-framework/dist/helpers/arrayHelper");
const objectHelper_1 = require("unitejs-framework/dist/helpers/objectHelper");
const templateHelper_1 = require("../../helpers/templateHelper");
const sharedAppFramework_1 = require("../sharedAppFramework");
class React extends sharedAppFramework_1.SharedAppFramework {
    mainCondition(uniteConfiguration, engineVariables) {
        return super.condition(uniteConfiguration.applicationFramework, "React");
    }
    initialise(logger, fileSystem, uniteConfiguration, engineVariables, mainCondition) {
        const _super = name => super[name];
        return __awaiter(this, void 0, void 0, function* () {
            if (mainCondition) {
                arrayHelper_1.ArrayHelper.addRemove(uniteConfiguration.viewExtensions, "html", true);
                arrayHelper_1.ArrayHelper.addRemove(uniteConfiguration.sourceExtensions, "tsx", _super("condition").call(this, uniteConfiguration.sourceLanguage, "TypeScript"));
                arrayHelper_1.ArrayHelper.addRemove(uniteConfiguration.sourceExtensions, "jsx", _super("condition").call(this, uniteConfiguration.sourceLanguage, "JavaScript"));
            }
            return 0;
        });
    }
    configure(logger, fileSystem, uniteConfiguration, engineVariables, mainCondition) {
        const _super = name => super[name];
        return __awaiter(this, void 0, void 0, function* () {
            engineVariables.toggleDevDependency([
                "@babel/preset-react",
                "@babel/plugin-proposal-decorators",
                "@babel/plugin-proposal-class-properties"
            ], mainCondition && _super("condition").call(this, uniteConfiguration.sourceLanguage, "JavaScript"));
            engineVariables.toggleDevDependency(["eslint-plugin-react", "babel-eslint"], mainCondition && _super("condition").call(this, uniteConfiguration.linter, "ESLint"));
            engineVariables.toggleDevDependency(["@types/react", "@types/react-dom", "@types/react-router-dom"], mainCondition && _super("condition").call(this, uniteConfiguration.sourceLanguage, "TypeScript"));
            engineVariables.toggleDevDependency(["unitejs-protractor-plugin"], mainCondition && _super("condition").call(this, uniteConfiguration.e2eTestRunner, "Protractor"));
            engineVariables.toggleDevDependency(["unitejs-webdriver-plugin"], mainCondition && _super("condition").call(this, uniteConfiguration.e2eTestRunner, "WebdriverIO"));
            engineVariables.toggleClientPackage("react", {
                name: "react",
                main: "umd/react.development.js",
                mainMinified: "umd/react.production.min.js"
            }, mainCondition);
            engineVariables.toggleClientPackage("react-dom", {
                name: "react-dom",
                main: "umd/react-dom.development.js",
                mainMinified: "umd/react-dom.production.min.js"
            }, mainCondition);
            engineVariables.toggleClientPackage("react-router-dom", {
                name: "react-router-dom",
                main: "umd/react-router-dom.js",
                mainMinified: "umd/react-router-dom.min.js"
            }, mainCondition);
            engineVariables.toggleClientPackage("require-css", {
                name: "require-css",
                main: "css.js",
                map: { css: "require-css" }
            }, mainCondition && _super("condition").call(this, uniteConfiguration.bundler, "RequireJS"));
            engineVariables.toggleClientPackage("systemjs-plugin-css", {
                name: "systemjs-plugin-css",
                main: "css.js",
                map: { css: "systemjs-plugin-css" },
                loaders: { "*.css": "css" }
            }, mainCondition &&
                (_super("condition").call(this, uniteConfiguration.bundler, "Browserify") ||
                    _super("condition").call(this, uniteConfiguration.bundler, "SystemJSBuilder") ||
                    _super("condition").call(this, uniteConfiguration.bundler, "Webpack")));
            if (mainCondition && _super("condition").call(this, uniteConfiguration.taskManager, "Gulp") && _super("condition").call(this, uniteConfiguration.bundler, "RequireJS")) {
                _super("createLoaderTypeMapReplacement").call(this, engineVariables, "css", "css");
            }
            const esLintConfiguration = engineVariables.getConfiguration("ESLint");
            if (esLintConfiguration) {
                objectHelper_1.ObjectHelper.addRemove(esLintConfiguration, "parser", "babel-eslint", mainCondition);
                objectHelper_1.ObjectHelper.addRemove(esLintConfiguration.parserOptions.ecmaFeatures, "jsx", true, mainCondition);
                arrayHelper_1.ArrayHelper.addRemove(esLintConfiguration.extends, "plugin:react/recommended", mainCondition);
                arrayHelper_1.ArrayHelper.addRemove(esLintConfiguration.plugins, "react", mainCondition);
                objectHelper_1.ObjectHelper.addRemove(esLintConfiguration.rules, "no-unused-vars", 1, mainCondition);
            }
            const tsLintConfiguration = engineVariables.getConfiguration("TSLint");
            if (tsLintConfiguration) {
                objectHelper_1.ObjectHelper.addRemove(tsLintConfiguration.rules, "no-empty", { severity: "warning" }, mainCondition);
                objectHelper_1.ObjectHelper.addRemove(tsLintConfiguration.rules, "no-empty-interface", { severity: "warning" }, mainCondition);
                objectHelper_1.ObjectHelper.addRemove(tsLintConfiguration.rules, "variable-name", [true, "allow-leading-underscore"], mainCondition);
            }
            const babelConfiguration = engineVariables.getConfiguration("Babel");
            if (babelConfiguration) {
                arrayHelper_1.ArrayHelper.addRemove(babelConfiguration.plugins, ["@babel/plugin-proposal-decorators", { legacy: true }], mainCondition, (obj, item) => Array.isArray(item) && item.length > 0 && item[0] === obj[0]);
                arrayHelper_1.ArrayHelper.addRemove(babelConfiguration.plugins, ["@babel/plugin-proposal-class-properties", { loose: true }], mainCondition, (obj, item) => Array.isArray(item) && item.length > 0 && item[0] === obj[0]);
                arrayHelper_1.ArrayHelper.addRemove(babelConfiguration.presets, "@babel/preset-react", mainCondition);
            }
            const protractorConfiguration = engineVariables.getConfiguration("Protractor");
            if (protractorConfiguration) {
                const plugin = fileSystem.pathToWeb(fileSystem.pathFileRelative(engineVariables.wwwRootFolder, fileSystem.pathCombine(engineVariables.www.package, "unitejs-protractor-plugin")));
                arrayHelper_1.ArrayHelper.addRemove(protractorConfiguration.plugins, { path: plugin }, mainCondition, (object, item) => object.path === item.path);
            }
            const webdriverIoPlugins = engineVariables.getConfiguration("WebdriverIO.Plugins");
            if (webdriverIoPlugins) {
                arrayHelper_1.ArrayHelper.addRemove(webdriverIoPlugins, "unitejs-webdriver-plugin", mainCondition);
            }
            const typeScriptConfiguration = engineVariables.getConfiguration("TypeScript");
            if (typeScriptConfiguration) {
                objectHelper_1.ObjectHelper.addRemove(typeScriptConfiguration.compilerOptions, "jsx", "react", mainCondition);
                objectHelper_1.ObjectHelper.addRemove(typeScriptConfiguration.compilerOptions, "experimentalDecorators", true, mainCondition);
            }
            const javaScriptConfiguration = engineVariables.getConfiguration("JavaScript");
            if (javaScriptConfiguration) {
                objectHelper_1.ObjectHelper.addRemove(javaScriptConfiguration.compilerOptions, "experimentalDecorators", true, mainCondition);
            }
            const typeDocConfiguration = engineVariables.getConfiguration("TypeDoc");
            if (typeDocConfiguration) {
                objectHelper_1.ObjectHelper.addRemove(typeDocConfiguration, "jsx", "react", mainCondition);
            }
            return 0;
        });
    }
    finalise(logger, fileSystem, uniteConfiguration, engineVariables, mainCondition) {
        const _super = name => super[name];
        return __awaiter(this, void 0, void 0, function* () {
            if (mainCondition) {
                const sourceExtension = _super("condition").call(this, uniteConfiguration.sourceLanguage, "TypeScript") ? ".ts" : ".js";
                let ret = yield this.generateAppSource(logger, fileSystem, uniteConfiguration, engineVariables, [
                    `app${sourceExtension}x`,
                    `child/child${sourceExtension}x`,
                    `bootstrapper${sourceExtension}`
                ], false);
                if (ret === 0) {
                    ret = yield _super("generateAppSource").call(this, logger, fileSystem, uniteConfiguration, engineVariables, [`entryPoint${sourceExtension}`], true);
                }
                if (ret === 0) {
                    ret = yield _super("generateAppCss").call(this, logger, fileSystem, uniteConfiguration, engineVariables, [`child/child`]);
                }
                if (ret === 0) {
                    ret = yield _super("generateE2eTest").call(this, logger, fileSystem, uniteConfiguration, engineVariables, [`app.spec${sourceExtension}`], true);
                }
                if (ret === 0) {
                    ret = yield this.generateUnitTest(logger, fileSystem, uniteConfiguration, engineVariables, [`app.spec${sourceExtension}`, `bootstrapper.spec${sourceExtension}`], true);
                }
                if (ret === 0) {
                    ret = yield _super("generateCss").call(this, logger, fileSystem, uniteConfiguration, engineVariables);
                }
                return ret;
            }
            else {
                return 0;
            }
        });
    }
    insertRoutes(logger, fileSystem, uniteConfiguration, engineVariables, routes) {
        const _super = name => super[name];
        return __awaiter(this, void 0, void 0, function* () {
            const sourceExtension = _super("condition").call(this, uniteConfiguration.sourceLanguage, "TypeScript") ? ".tsx" : ".jsx";
            const bracketSpacing = _super("condition").call(this, uniteConfiguration.sourceLanguage, "TypeScript") ? " " : "";
            let routerItems = [];
            const importItems = [];
            const routeItems = [];
            let navigationLinks = [];
            const keys = Object.keys(routes || {});
            for (let i = 0; i < keys.length; i++) {
                const route = routes[keys[i]];
                const words = templateHelper_1.TemplateHelper.generateWords(route.moduleType);
                const human = templateHelper_1.TemplateHelper.createHuman(words);
                importItems.push(`import {${bracketSpacing}${route.moduleType}${bracketSpacing}} from "${route.modulePath}";`);
                routerItems.push(`<Route path="/${keys[i]}" component={${route.moduleType}} />`);
                routeItems.push(`/${keys[i]}`);
                navigationLinks.push(`<Link to="/${keys[i]}">${human}</Link>`);
            }
            const remainingInserts = {};
            const ret = yield _super("insertContent").call(this, logger, fileSystem, engineVariables, `app${sourceExtension}`, (srcContent) => {
                let content = srcContent;
                const importsRemaining = _super("insertReplaceImports").call(this, content, importItems);
                content = importsRemaining.content;
                remainingInserts.imports = importsRemaining.remaining;
                const routerRegEx = /(<Switch.*>)(\s*)([\s|\S]*?)((\s*)<\/Switch>)/;
                const routerResults = routerRegEx.exec(content);
                if (routerResults && routerResults.length > 4) {
                    const currentRouters = routerResults[3].trim();
                    routerItems = routerItems.filter(ri => currentRouters.replace(/\s/g, "")
                        .indexOf(ri.replace(/\s/g, "")) < 0);
                    if (routerItems.length > 0) {
                        const routerStart = routerResults[1];
                        const routerNewline = routerResults[2];
                        const routerEnd = routerResults[4];
                        let replaceRouters = `${routerNewline}${currentRouters}${routerNewline}`;
                        replaceRouters += `${routerItems.map(ri => ri.replace(/\n/g, routerNewline))
                            .join(`${routerNewline}`)}`;
                        content = content.replace(routerResults[0], `${routerStart}${replaceRouters}${routerEnd}`);
                    }
                }
                else {
                    remainingInserts.router = routerItems;
                }
                const navigationRegEx = /(<nav.*>)(\s*)([\s|\S]*?)((\s*)<\/nav>)/;
                const navigationResults = navigationRegEx.exec(content);
                if (navigationResults && navigationResults.length > 4) {
                    const currentLinks = navigationResults[3].trim();
                    navigationLinks = navigationLinks.filter(ri => currentLinks.replace(/\s/g, "")
                        .indexOf(ri.replace(/\s/g, "")) < 0);
                    if (navigationLinks.length > 0) {
                        const navigationStart = navigationResults[1];
                        const navigationNewline = navigationResults[2];
                        const navigationEnd = navigationResults[4];
                        let replaceRouters = `${navigationNewline}${currentLinks}&nbsp;${navigationNewline}`;
                        replaceRouters += `${navigationLinks.map(ri => ri.replace(/\n/g, navigationNewline))
                            .join(`&nbsp;${navigationNewline}`)}`;
                        content = content.replace(navigationResults[0], `${navigationStart}${replaceRouters}${navigationEnd}`);
                    }
                }
                else {
                    remainingInserts.navigationLinks = navigationLinks;
                }
                return content;
            });
            if (ret === 0) {
                _super("insertCompletion").call(this, logger, remainingInserts, routeItems);
            }
            return ret;
        });
    }
}
exports.React = React;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
