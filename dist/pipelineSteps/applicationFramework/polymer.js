"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Pipeline step to generate scaffolding for Polymer application.
 */
const arrayHelper_1 = require("unitejs-framework/dist/helpers/arrayHelper");
const objectHelper_1 = require("unitejs-framework/dist/helpers/objectHelper");
const templateHelper_1 = require("../../helpers/templateHelper");
const sharedAppFramework_1 = require("../sharedAppFramework");
class Polymer extends sharedAppFramework_1.SharedAppFramework {
    mainCondition(uniteConfiguration, engineVariables) {
        return super.condition(uniteConfiguration.applicationFramework, "Polymer");
    }
    initialise(logger, fileSystem, uniteConfiguration, engineVariables, mainCondition) {
        const _super = name => super[name];
        return __awaiter(this, void 0, void 0, function* () {
            if (mainCondition) {
                if (_super("condition").call(this, uniteConfiguration.unitTestEngine, "PhantomJS") || _super("condition").call(this, uniteConfiguration.unitTestEngine, "JSDom")) {
                    logger.error(`Polymer does not support unit testing with ${uniteConfiguration.unitTestEngine}`);
                    return 1;
                }
                if (_super("condition").call(this, uniteConfiguration.bundler, "RequireJS")) {
                    logger.error(`Polymer does not currently support bundling with ${uniteConfiguration.bundler}`);
                    return 1;
                }
                arrayHelper_1.ArrayHelper.addRemove(uniteConfiguration.viewExtensions, "html", true);
            }
            return 0;
        });
    }
    configure(logger, fileSystem, uniteConfiguration, engineVariables, mainCondition) {
        const _super = name => super[name];
        return __awaiter(this, void 0, void 0, function* () {
            engineVariables.toggleDevDependency(["unitejs-protractor-plugin"], mainCondition && _super("condition").call(this, uniteConfiguration.e2eTestRunner, "Protractor"));
            engineVariables.toggleDevDependency(["unitejs-webdriver-plugin"], mainCondition && _super("condition").call(this, uniteConfiguration.e2eTestRunner, "WebdriverIO"));
            engineVariables.toggleDevDependency(["@babel/plugin-proposal-decorators", "@babel/plugin-proposal-class-properties"], mainCondition && _super("condition").call(this, uniteConfiguration.sourceLanguage, "JavaScript"));
            engineVariables.toggleDevDependency(["babel-eslint"], mainCondition && _super("condition").call(this, uniteConfiguration.linter, "ESLint"));
            engineVariables.toggleDevDependency(["@types/polymer"], mainCondition && _super("condition").call(this, uniteConfiguration.sourceLanguage, "TypeScript"));
            engineVariables.toggleDevDependency(["@types/webcomponents.js"], mainCondition && _super("condition").call(this, uniteConfiguration.sourceLanguage, "TypeScript"));
            engineVariables.toggleClientPackage("@webcomponents/webcomponentsjs-es5adapter", {
                name: "@webcomponents/webcomponentsjs",
                main: "custom-elements-es5-adapter.js",
                mainMinified: "custom-elements-es5-adapter.js",
                scriptIncludeMode: "both"
            }, mainCondition);
            engineVariables.toggleClientPackage("@webcomponents/webcomponentsjs", {
                name: "@webcomponents/webcomponentsjs",
                main: "webcomponents-bundle.js",
                mainMinified: "webcomponents-bundle.js",
                scriptIncludeMode: "both"
            }, mainCondition);
            engineVariables.toggleClientPackage("@webcomponents/shadycss", {
                name: "@webcomponents/shadycss",
                main: "*",
                mainLib: [
                    "entrypoints/*.js",
                    "src/*.js"
                ]
            }, mainCondition);
            engineVariables.toggleClientPackage("@polymer/polymer", {
                name: "@polymer/polymer",
                main: "*",
                mainLib: [
                    "externs/*.js",
                    "lib/elements/*.js",
                    "lib/legacy/*.js",
                    "lib/mixins/*.js",
                    "lib/utils/*.js",
                    "*.js"
                ]
            }, mainCondition);
            engineVariables.toggleClientPackage("@polymer/decorators", {
                name: "@polymer/decorators",
                main: "lib/decorators.js"
            }, mainCondition);
            const components = ["app-route", "iron-location", "iron-pages", "iron-selector", "iron-resizable-behavior"];
            components.forEach(component => {
                engineVariables.toggleClientPackage(`@polymer/${component}`, {
                    name: `@polymer/${component}`,
                    main: "*",
                    mainLib: [
                        "*.js"
                    ]
                }, mainCondition);
            });
            engineVariables.toggleClientPackage("requirejs-text", {
                name: "requirejs-text",
                main: "text.js",
                map: { text: "requirejs-text" }
            }, mainCondition && _super("condition").call(this, uniteConfiguration.moduleType, "AMD"));
            engineVariables.toggleClientPackage("systemjs-plugin-text", {
                name: "systemjs-plugin-text",
                main: "text.js",
                map: {
                    text: "systemjs-plugin-text"
                },
                loaders: {
                    "*.html": "text",
                    "*.css": "text"
                }
            }, mainCondition &&
                (_super("condition").call(this, uniteConfiguration.bundler, "Browserify") ||
                    _super("condition").call(this, uniteConfiguration.bundler, "SystemJSBuilder") ||
                    _super("condition").call(this, uniteConfiguration.bundler, "Webpack")));
            if (mainCondition && _super("condition").call(this, uniteConfiguration.taskManager, "Gulp") && _super("condition").call(this, uniteConfiguration.bundler, "RequireJS")) {
                _super("createLoaderReplacement").call(this, engineVariables, "css", "text", true);
                _super("createLoaderReplacement").call(this, engineVariables, "html", "text", false);
            }
            const babelConfiguration = engineVariables.getConfiguration("Babel");
            if (babelConfiguration) {
                arrayHelper_1.ArrayHelper.addRemove(babelConfiguration.plugins, ["@babel/plugin-proposal-decorators", { legacy: true }], mainCondition, (obj, item) => Array.isArray(item) && item.length > 0 && item[0] === obj[0]);
                arrayHelper_1.ArrayHelper.addRemove(babelConfiguration.plugins, ["@babel/plugin-proposal-class-properties", { loose: true }], mainCondition, (obj, item) => Array.isArray(item) && item.length > 0 && item[0] === obj[0]);
            }
            const esLintConfiguration = engineVariables.getConfiguration("ESLint");
            if (esLintConfiguration) {
                objectHelper_1.ObjectHelper.addRemove(esLintConfiguration, "parser", "babel-eslint", mainCondition);
                objectHelper_1.ObjectHelper.addRemove(esLintConfiguration.rules, "no-unused-vars", 1, mainCondition);
            }
            const tsLintConfiguration = engineVariables.getConfiguration("TSLint");
            if (tsLintConfiguration) {
                objectHelper_1.ObjectHelper.addRemove(tsLintConfiguration.rules, "no-empty", { severity: "warning" }, mainCondition);
                objectHelper_1.ObjectHelper.addRemove(tsLintConfiguration.rules, "no-empty-interface", { severity: "warning" }, mainCondition);
                objectHelper_1.ObjectHelper.addRemove(tsLintConfiguration.rules, "variable-name", [true, "allow-leading-underscore"], mainCondition);
            }
            const protractorConfiguration = engineVariables.getConfiguration("Protractor");
            if (protractorConfiguration) {
                const plugin = fileSystem.pathToWeb(fileSystem.pathFileRelative(engineVariables.wwwRootFolder, fileSystem.pathCombine(engineVariables.www.package, "unitejs-protractor-plugin")));
                arrayHelper_1.ArrayHelper.addRemove(protractorConfiguration.plugins, { path: plugin }, mainCondition, (object, item) => object.path === item.path);
            }
            const webdriverIoPlugins = engineVariables.getConfiguration("WebdriverIO.Plugins");
            if (webdriverIoPlugins) {
                arrayHelper_1.ArrayHelper.addRemove(webdriverIoPlugins, "unitejs-webdriver-plugin", mainCondition);
            }
            const typeScriptConfiguration = engineVariables.getConfiguration("TypeScript");
            if (typeScriptConfiguration) {
                objectHelper_1.ObjectHelper.addRemove(typeScriptConfiguration.compilerOptions, "experimentalDecorators", true, mainCondition);
                objectHelper_1.ObjectHelper.addRemove(typeScriptConfiguration.compilerOptions, "esModuleInterop", true, mainCondition);
            }
            const javaScriptConfiguration = engineVariables.getConfiguration("JavaScript");
            if (javaScriptConfiguration) {
                objectHelper_1.ObjectHelper.addRemove(javaScriptConfiguration.compilerOptions, "experimentalDecorators", true, mainCondition);
            }
            return 0;
        });
    }
    finalise(logger, fileSystem, uniteConfiguration, engineVariables, mainCondition) {
        const _super = name => super[name];
        return __awaiter(this, void 0, void 0, function* () {
            if (mainCondition) {
                const isTypeScript = _super("condition").call(this, uniteConfiguration.sourceLanguage, "TypeScript");
                const sourceExtension = isTypeScript ? ".ts" : ".js";
                const srcFiles = [
                    `app${sourceExtension}`,
                    `child/child${sourceExtension}`,
                    `bootstrapper${sourceExtension}`
                ];
                if (isTypeScript) {
                    srcFiles.push("customTypes/polymer-module.d.ts");
                }
                let ret = yield this.generateAppSource(logger, fileSystem, uniteConfiguration, engineVariables, srcFiles, false);
                if (ret === 0) {
                    ret = yield _super("generateAppSource").call(this, logger, fileSystem, uniteConfiguration, engineVariables, [`entryPoint${sourceExtension}`], true);
                }
                if (ret === 0) {
                    ret = yield _super("generateAppHtml").call(this, logger, fileSystem, uniteConfiguration, engineVariables, ["app.html", "child/child.html"]);
                }
                if (ret === 0) {
                    ret = yield _super("generateAppCss").call(this, logger, fileSystem, uniteConfiguration, engineVariables, ["child/child"]);
                }
                if (ret === 0) {
                    ret = yield _super("generateE2eTest").call(this, logger, fileSystem, uniteConfiguration, engineVariables, [`app.spec${sourceExtension}`], false);
                }
                if (ret === 0) {
                    ret = yield this.generateUnitTest(logger, fileSystem, uniteConfiguration, engineVariables, [`app.spec${sourceExtension}`, `bootstrapper.spec${sourceExtension}`], true);
                }
                if (ret === 0) {
                    ret = yield _super("generateCss").call(this, logger, fileSystem, uniteConfiguration, engineVariables);
                }
                return ret;
            }
            else {
                return 0;
            }
        });
    }
    insertRoutes(logger, fileSystem, uniteConfiguration, engineVariables, routes) {
        const _super = name => super[name];
        return __awaiter(this, void 0, void 0, function* () {
            const sourceExtension = _super("condition").call(this, uniteConfiguration.sourceLanguage, "TypeScript") ? ".ts" : ".js";
            let routerItems = [];
            const importItems = [];
            const routeItems = [];
            const keys = Object.keys(routes || {});
            let navigationLinks = [];
            for (let i = 0; i < keys.length; i++) {
                const route = routes[keys[i]];
                const words = templateHelper_1.TemplateHelper.generateWords(route.moduleType);
                const snake = templateHelper_1.TemplateHelper.createSnake(words);
                const human = templateHelper_1.TemplateHelper.createHuman(words);
                routerItems.push(`<co-${snake} data-route="/${keys[i]}">\n</co-${snake}>`);
                importItems.push(`import "${route.modulePath}";`);
                routeItems.push(`/#/${keys[i]}`);
                navigationLinks.push(`<a href="#/${keys[i]}">${human}</a>`);
            }
            const remainingInserts = {};
            let ret = yield _super("insertContent").call(this, logger, fileSystem, engineVariables, `app${sourceExtension}`, (srcContent) => {
                let content = srcContent;
                const importsRemaining = _super("insertReplaceImports").call(this, content, importItems);
                content = importsRemaining.content;
                remainingInserts.imports = importsRemaining.remaining;
                return content;
            });
            if (ret === 0) {
                ret = yield _super("insertContent").call(this, logger, fileSystem, engineVariables, `app.html`, (srcContent) => {
                    let content = srcContent;
                    const routerRegEx = /(<iron-pages.*>)(\s*)([\s|\S]*?)((\s*)<\/iron-pages>)/;
                    const routerResults = routerRegEx.exec(content);
                    if (routerResults && routerResults.length > 4) {
                        const currentRouters = routerResults[3].trim();
                        routerItems = routerItems.filter(ri => currentRouters.replace(/\s/g, "")
                            .indexOf(ri.replace(/\s/g, "")) < 0);
                        if (routerItems.length > 0) {
                            const routerVar = routerResults[1];
                            const routerNewline = routerResults[2];
                            const routerEnd = routerResults[4];
                            let replaceRouters = `${routerNewline}${currentRouters}${routerNewline}`;
                            replaceRouters += `${routerItems.map(ri => ri.replace(/\n/g, routerNewline))
                                .join(`${routerNewline}`)}`;
                            content = content.replace(routerResults[0], `${routerVar}${replaceRouters}${routerEnd}`);
                        }
                    }
                    else {
                        remainingInserts.router = routerItems;
                    }
                    const navigationRegEx = /(<nav.*>)(\s*)([\s|\S]*?)((\s*)<\/nav>)/;
                    const navigationResults = navigationRegEx.exec(content);
                    if (navigationResults && navigationResults.length > 4) {
                        const currentLinks = navigationResults[3].trim();
                        navigationLinks = navigationLinks.filter(ri => currentLinks.replace(/\s/g, "")
                            .indexOf(ri.replace(/\s/g, "")) < 0);
                        if (navigationLinks.length > 0) {
                            const navigationStart = navigationResults[1];
                            const navigationNewline = navigationResults[2];
                            const navigationEnd = navigationResults[4];
                            let replaceRouters = `${navigationNewline}${currentLinks}${navigationNewline}`;
                            replaceRouters += `${navigationLinks.map(ri => ri.replace(/\n/g, navigationNewline))
                                .join(`${navigationNewline}`)}`;
                            content = content.replace(navigationResults[0], `${navigationStart}${replaceRouters}${navigationEnd}`);
                        }
                    }
                    else {
                        remainingInserts.navigationLinks = navigationLinks;
                    }
                    return content;
                });
            }
            if (ret === 0) {
                _super("insertCompletion").call(this, logger, remainingInserts, routeItems);
            }
            return ret;
        });
    }
}
exports.Polymer = Polymer;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
