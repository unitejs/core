"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Pipeline step to generate scaffolding for angular application.
 */
const arrayHelper_1 = require("unitejs-framework/dist/helpers/arrayHelper");
const objectHelper_1 = require("unitejs-framework/dist/helpers/objectHelper");
const templateHelper_1 = require("../../helpers/templateHelper");
const sharedAppFramework_1 = require("../sharedAppFramework");
class Angular extends sharedAppFramework_1.SharedAppFramework {
    mainCondition(uniteConfiguration, engineVariables) {
        return super.condition(uniteConfiguration.applicationFramework, "Angular");
    }
    initialise(logger, fileSystem, uniteConfiguration, engineVariables, mainCondition) {
        const _super = name => super[name];
        return __awaiter(this, void 0, void 0, function* () {
            if (mainCondition) {
                if (_super("condition").call(this, uniteConfiguration.bundler, "RequireJS")) {
                    logger.error(`Angular does not currently support bundling with ${uniteConfiguration.bundler}`);
                    return 1;
                }
                arrayHelper_1.ArrayHelper.addRemove(uniteConfiguration.viewExtensions, "html", true);
            }
            return 0;
        });
    }
    configure(logger, fileSystem, uniteConfiguration, engineVariables, mainCondition) {
        const _super = name => super[name];
        return __awaiter(this, void 0, void 0, function* () {
            this.toggleDependencies(logger, uniteConfiguration, engineVariables, mainCondition);
            const usingGulp = _super("condition").call(this, uniteConfiguration.taskManager, "Gulp");
            if (mainCondition && usingGulp) {
                engineVariables.buildTranspileInclude.push("const inline = require(\"gulp-inline-ng2-template\");");
                engineVariables.buildTranspileInclude.push("const replace = require(\"gulp-replace\");");
                engineVariables.buildTranspilePreBuild.push("        .pipe(buildConfiguration.bundle ? inline({");
                engineVariables.buildTranspilePreBuild.push("                useRelativePaths: true,");
                engineVariables.buildTranspilePreBuild.push("                removeLineBreaks: true,");
                engineVariables.buildTranspilePreBuild.push("                customFilePath: (ext, inlinePath) => ext[0] === \".css\" ?");
                engineVariables.buildTranspilePreBuild.push("                    inlinePath.replace(`\${path.sep}src\${path.sep}`, `\${path.sep}dist\${path.sep}`) : inlinePath");
                engineVariables.buildTranspilePreBuild.push("        }) : through2.obj())");
                const moduleIdRegEx = engineVariables.moduleId.replace(/\./g, "\\.")
                    .replace(/\(/g, "\\(")
                    .replace(/\)/g, "\\)");
                engineVariables.buildTranspilePreBuild.push(`        .pipe(buildConfiguration.bundle ? replace(/moduleId: ${moduleIdRegEx},/, "") : through2.obj())`);
            }
            engineVariables.toggleDevDependency(["gulp-inline-ng2-template"], mainCondition && usingGulp);
            engineVariables.toggleDevDependency(["unitejs-protractor-plugin"], mainCondition && _super("condition").call(this, uniteConfiguration.e2eTestRunner, "Protractor"));
            engineVariables.toggleDevDependency(["unitejs-webdriver-plugin"], mainCondition && _super("condition").call(this, uniteConfiguration.e2eTestRunner, "WebdriverIO"));
            engineVariables.toggleDevDependency(["@babel/plugin-proposal-decorators", "@babel/plugin-proposal-class-properties"], mainCondition && _super("condition").call(this, uniteConfiguration.sourceLanguage, "JavaScript"));
            engineVariables.toggleDevDependency(["babel-eslint"], mainCondition && _super("condition").call(this, uniteConfiguration.linter, "ESLint"));
            engineVariables.toggleDevDependency(["@types/systemjs"], mainCondition && _super("condition").call(this, uniteConfiguration.sourceLanguage, "TypeScript"));
            const protractorConfiguration = engineVariables.getConfiguration("Protractor");
            if (protractorConfiguration) {
                const plugin = fileSystem.pathToWeb(fileSystem.pathFileRelative(engineVariables.wwwRootFolder, fileSystem.pathCombine(engineVariables.www.package, "unitejs-protractor-plugin")));
                arrayHelper_1.ArrayHelper.addRemove(protractorConfiguration.plugins, { path: plugin }, mainCondition, (object, item) => object.path === item.path);
            }
            const webdriverIoPlugins = engineVariables.getConfiguration("WebdriverIO.Plugins");
            if (webdriverIoPlugins) {
                arrayHelper_1.ArrayHelper.addRemove(webdriverIoPlugins, "unitejs-webdriver-plugin", mainCondition);
            }
            const babelConfiguration = engineVariables.getConfiguration("Babel");
            if (babelConfiguration) {
                arrayHelper_1.ArrayHelper.addRemove(babelConfiguration.plugins, ["@babel/plugin-proposal-decorators", { legacy: true }], mainCondition, (obj, item) => Array.isArray(item) && item.length > 0 && item[0] === obj[0]);
                arrayHelper_1.ArrayHelper.addRemove(babelConfiguration.plugins, ["@babel/plugin-proposal-class-properties", { loose: true }], mainCondition, (obj, item) => Array.isArray(item) && item.length > 0 && item[0] === obj[0]);
            }
            const esLintConfiguration = engineVariables.getConfiguration("ESLint");
            if (esLintConfiguration) {
                objectHelper_1.ObjectHelper.addRemove(esLintConfiguration.globals, "__moduleName", true, mainCondition);
                objectHelper_1.ObjectHelper.addRemove(esLintConfiguration.globals, "module", true, mainCondition);
                objectHelper_1.ObjectHelper.addRemove(esLintConfiguration, "parser", "babel-eslint", mainCondition);
                objectHelper_1.ObjectHelper.addRemove(esLintConfiguration.rules, "no-unused-vars", 1, mainCondition);
            }
            const typeScriptConfiguration = engineVariables.getConfiguration("TypeScript");
            if (typeScriptConfiguration) {
                objectHelper_1.ObjectHelper.addRemove(typeScriptConfiguration.compilerOptions, "experimentalDecorators", true, mainCondition);
            }
            const javaScriptConfiguration = engineVariables.getConfiguration("JavaScript");
            if (javaScriptConfiguration) {
                objectHelper_1.ObjectHelper.addRemove(javaScriptConfiguration.compilerOptions, "experimentalDecorators", true, mainCondition);
            }
            const tsLintConfiguration = engineVariables.getConfiguration("TSLint");
            if (tsLintConfiguration) {
                objectHelper_1.ObjectHelper.addRemove(tsLintConfiguration.rules, "no-empty", { severity: "warning" }, mainCondition);
                objectHelper_1.ObjectHelper.addRemove(tsLintConfiguration.rules, "no-empty-interface", { severity: "warning" }, mainCondition);
                objectHelper_1.ObjectHelper.addRemove(tsLintConfiguration.rules, "interface-name", false, mainCondition);
                objectHelper_1.ObjectHelper.addRemove(tsLintConfiguration.rules, "variable-name", [true, "allow-leading-underscore"], mainCondition);
            }
            return 0;
        });
    }
    finalise(logger, fileSystem, uniteConfiguration, engineVariables, mainCondition) {
        const _super = name => super[name];
        return __awaiter(this, void 0, void 0, function* () {
            if (mainCondition) {
                const sourceExtension = _super("condition").call(this, uniteConfiguration.sourceLanguage, "TypeScript") ? ".ts" : ".js";
                let ret = yield this.generateAppSource(logger, fileSystem, uniteConfiguration, engineVariables, [
                    `app.component${sourceExtension}`,
                    `app.module${sourceExtension}`,
                    `child/child.component${sourceExtension}`,
                    `bootstrapper${sourceExtension}`
                ], false);
                if (ret === 0) {
                    ret = yield _super("generateAppSource").call(this, logger, fileSystem, uniteConfiguration, engineVariables, [`entryPoint${sourceExtension}`], true);
                }
                if (ret === 0) {
                    ret = yield _super("generateAppHtml").call(this, logger, fileSystem, uniteConfiguration, engineVariables, ["app.component.html", "child/child.component.html"]);
                }
                if (ret === 0) {
                    ret = yield _super("generateAppCss").call(this, logger, fileSystem, uniteConfiguration, engineVariables, ["app.component", "child/child.component"]);
                }
                if (ret === 0) {
                    ret = yield _super("generateE2eTest").call(this, logger, fileSystem, uniteConfiguration, engineVariables, [`app.spec${sourceExtension}`], true);
                }
                if (ret === 0) {
                    ret = yield this.generateUnitTest(logger, fileSystem, uniteConfiguration, engineVariables, [`bootstrapper.spec${sourceExtension}`], true);
                }
                if (ret === 0) {
                    ret = yield this.generateUnitTest(logger, fileSystem, uniteConfiguration, engineVariables, [`app.module.spec${sourceExtension}`], false);
                }
                if (ret === 0) {
                    ret = yield _super("generateCss").call(this, logger, fileSystem, uniteConfiguration, engineVariables);
                }
                return ret;
            }
            else {
                return 0;
            }
        });
    }
    toggleDependencies(logger, uniteConfiguration, engineVariables, mainCondition) {
        const packages = ["core", "common", "compiler", "platform-browser", "platform-browser-dynamic", "http", "router", "forms"];
        packages.forEach(pkg => {
            const testAdditions = {};
            if (pkg !== "forms") {
                testAdditions[`@angular/${pkg}/testing`] = `bundles/${pkg}-testing.umd.js`;
            }
            engineVariables.toggleClientPackage(`@angular/${pkg}`, {
                name: `@angular/${pkg}`,
                main: `bundles/${pkg}.umd.js`,
                mainMinified: `bundles/${pkg}.umd.min.js`,
                testingAdditions: testAdditions
            }, mainCondition);
        });
        engineVariables.toggleClientPackage("rxjs", {
            name: "rxjs",
            main: "*",
            libFile: "index.js",
            libExtension: "js",
            mainLib: [
                "operator",
                "operators",
                "observable",
                "scheduler",
                "symbol",
                "testing",
                "add/operator",
                "add/observable",
                "internal",
                "internal/observable",
                "internal/operators",
                "internal/scheduler",
                "internal/symbol",
                "internal/testing",
                "internal/util",
                "util"
            ]
        }, mainCondition);
        engineVariables.toggleClientPackage("rxjs-compat", {
            name: "rxjs-compat",
            main: "*",
            mainLib: [
                "operator",
                "operators",
                "observable",
                "scheduler",
                "symbol",
                "testing",
                "add/operator",
                "add/observable",
                "internal",
                "internal/observable",
                "internal/operators",
                "internal/scheduler",
                "internal/symbol",
                "internal/testing",
                "internal/util",
                "util"
            ]
        }, mainCondition);
        engineVariables.toggleClientPackage("core-js", {
            name: "core-js",
            main: "client/shim.js",
            mainMinified: "client/shim.min.js",
            scriptIncludeMode: "both"
        }, mainCondition);
        engineVariables.toggleClientPackage("zone.js", {
            name: "zone.js",
            main: "dist/zone.js",
            mainMinified: "dist/zone.min.js",
            testingAdditions: {
                "long-stack-trace-zone": "dist/long-stack-trace-zone.js",
                proxy: "dist/proxy.js",
                "sync-test": "dist/sync-test.js",
                "runner-patch": super.condition(uniteConfiguration.unitTestFramework, "Jasmine") ? "dist/jasmine-patch.js" : "dist/mocha-patch.js",
                "async-test": "dist/async-test.js",
                "fake-async-test": "dist/fake-async-test.js"
            },
            scriptIncludeMode: "both"
        }, mainCondition);
        // main condition false to always remove, since ng5 no longer requires
        engineVariables.toggleClientPackage("reflect-metadata", {
            name: "reflect-metadata"
        }, false);
    }
    insertRoutes(logger, fileSystem, uniteConfiguration, engineVariables, routes) {
        const _super = name => super[name];
        return __awaiter(this, void 0, void 0, function* () {
            const sourceExtension = _super("condition").call(this, uniteConfiguration.sourceLanguage, "TypeScript") ? ".ts" : ".js";
            const bracketSpacing = _super("condition").call(this, uniteConfiguration.sourceLanguage, "TypeScript") ? " " : "";
            let routerItems = [];
            const importItems = [];
            let declarationItems = [];
            const routeItems = [];
            let navigationLinks = [];
            const keys = Object.keys(routes || {});
            for (let i = 0; i < keys.length; i++) {
                const route = routes[keys[i]];
                const words = templateHelper_1.TemplateHelper.generateWords(route.moduleType);
                const human = templateHelper_1.TemplateHelper.createHuman(words);
                importItems.push(`import {${bracketSpacing}${route.moduleType}${bracketSpacing}} from "${route.modulePath}";`);
                routerItems.push(`{${bracketSpacing}path: "${keys[i]}", component: ${route.moduleType}${bracketSpacing}}`);
                declarationItems.push(route.moduleType);
                routeItems.push(`/${keys[i]}`);
                navigationLinks.push(`<a routerLink="/${keys[i]}">${human}</a>`);
            }
            const remainingInserts = {};
            let ret = yield _super("insertContent").call(this, logger, fileSystem, engineVariables, `app.module${sourceExtension}`, (srcContent) => {
                let content = srcContent;
                const importsRemaining = _super("insertReplaceImports").call(this, content, importItems);
                content = importsRemaining.content;
                remainingInserts.imports = importsRemaining.remaining;
                const routerRegEx = /(const appRoutes = \[)([\s]*)([\s\S]*?)(\];)/;
                const routerResults = routerRegEx.exec(content);
                if (routerResults && routerResults.length > 3) {
                    const currentRouters = routerResults[3].trim();
                    routerItems = routerItems.filter(ri => currentRouters.replace(/\s/g, "")
                        .indexOf(ri.replace(/\s/g, "")) < 0);
                    if (routerItems.length > 0) {
                        const routerVar = routerResults[1];
                        const routerNewline = routerResults[2];
                        const routerEnd = routerResults[4];
                        let replaceRouters = `${routerNewline}${currentRouters},${routerNewline}`;
                        replaceRouters += `${routerItems.map(ri => ri.replace(/\n/g, routerNewline))
                            .join(`,${routerNewline}`)}\n`;
                        content = content.replace(routerResults[0], `${routerVar}${replaceRouters}${routerEnd}`);
                    }
                }
                else {
                    remainingInserts.router = routerItems;
                }
                const declarationRegEx = /(declarations: \[)(\s*)([\s\S]*?)(\s*\])/;
                const declarationResults = declarationRegEx.exec(content);
                if (declarationResults && declarationResults.length > 3) {
                    const currentDeclarations = declarationResults[3];
                    declarationItems = declarationItems.filter(di => currentDeclarations.indexOf(di) < 0);
                    if (declarationItems.length > 0) {
                        const declarationStart = declarationResults[1];
                        const declarationNewline = declarationResults[2];
                        const declarationEnd = declarationResults[4];
                        let replaceDeclarations = `${declarationNewline}${currentDeclarations},${declarationNewline}`;
                        replaceDeclarations += `${declarationItems.join(`,${declarationNewline}`)}`;
                        content = content.replace(declarationResults[0], `${declarationStart}${replaceDeclarations}${declarationEnd}`);
                    }
                }
                else {
                    remainingInserts.declarations = declarationItems;
                }
                return content;
            });
            if (ret === 0) {
                ret = yield _super("insertContent").call(this, logger, fileSystem, engineVariables, `app.component.html`, (srcContent) => {
                    let content = srcContent;
                    const navigationRegEx = /(<nav.*>)(\s*)([\s|\S]*?)((\s*)<\/nav>)/;
                    const navigationResults = navigationRegEx.exec(content);
                    if (navigationResults && navigationResults.length > 4) {
                        const currentLinks = navigationResults[3].trim();
                        navigationLinks = navigationLinks.filter(ri => currentLinks.replace(/\s/g, "")
                            .indexOf(ri.replace(/\s/g, "")) < 0);
                        if (navigationLinks.length > 0) {
                            const navigationStart = navigationResults[1];
                            const navigationNewline = navigationResults[2];
                            const nvaigationEnd = navigationResults[4];
                            let replaceRouters = `${navigationNewline}${currentLinks}${navigationNewline}`;
                            replaceRouters += `${navigationLinks.map(ri => ri.replace(/\n/g, navigationNewline))
                                .join(`${navigationNewline}`)}`;
                            content = content.replace(navigationResults[0], `${navigationStart}${replaceRouters}${nvaigationEnd}`);
                        }
                    }
                    else {
                        remainingInserts.navigationLinks = navigationLinks;
                    }
                    return content;
                });
            }
            if (ret === 0) {
                _super("insertCompletion").call(this, logger, remainingInserts, routeItems);
            }
            return ret;
        });
    }
}
exports.Angular = Angular;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
