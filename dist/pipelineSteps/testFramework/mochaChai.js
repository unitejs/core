"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Pipeline step to generate mocha configuration.
 */
const arrayHelper_1 = require("unitejs-framework/dist/helpers/arrayHelper");
const objectHelper_1 = require("unitejs-framework/dist/helpers/objectHelper");
const pipelineStepBase_1 = require("../../engine/pipelineStepBase");
class MochaChai extends pipelineStepBase_1.PipelineStepBase {
    mainCondition(uniteConfiguration, engineVariables) {
        return super.condition(uniteConfiguration.unitTestFramework, "MochaChai") || super.condition(uniteConfiguration.e2eTestFramework, "MochaChai");
    }
    configure(logger, fileSystem, uniteConfiguration, engineVariables, mainCondition) {
        const _super = Object.create(null, {
            condition: { get: () => super.condition }
        });
        return __awaiter(this, void 0, void 0, function* () {
            const isUnit = _super.condition.call(this, uniteConfiguration.unitTestFramework, "MochaChai");
            const isE2E = _super.condition.call(this, uniteConfiguration.e2eTestFramework, "MochaChai");
            engineVariables.toggleDevDependency(["mocha"], mainCondition);
            engineVariables.toggleDevDependency(["@types/mocha", "@types/chai"], mainCondition && _super.condition.call(this, uniteConfiguration.sourceLanguage, "TypeScript"));
            engineVariables.toggleDevDependency(["karma-mocha", "karma-chai"], mainCondition && _super.condition.call(this, uniteConfiguration.unitTestRunner, "Karma") && isUnit);
            engineVariables.toggleDevDependency(["mochawesome-screenshots"], mainCondition && _super.condition.call(this, uniteConfiguration.e2eTestRunner, "Protractor") && isE2E);
            engineVariables.toggleDevDependency(["wdio-mocha-framework"], mainCondition && _super.condition.call(this, uniteConfiguration.e2eTestRunner, "WebdriverIO") && isE2E);
            engineVariables.toggleClientPackage("chai", {
                name: "chai",
                main: "chai.js",
                preload: true,
                includeMode: "test"
            }, mainCondition);
            const esLintConfiguration = engineVariables.getConfiguration("ESLint");
            if (esLintConfiguration) {
                objectHelper_1.ObjectHelper.addRemove(esLintConfiguration.env, "mocha", true, mainCondition);
            }
            const karmaConfiguration = engineVariables.getConfiguration("Karma");
            if (karmaConfiguration) {
                arrayHelper_1.ArrayHelper.addRemove(karmaConfiguration.frameworks, "mocha", mainCondition && isUnit);
            }
            const protractorConfiguration = engineVariables.getConfiguration("Protractor");
            if (protractorConfiguration) {
                objectHelper_1.ObjectHelper.addRemove(protractorConfiguration, "framework", "mocha", mainCondition && isE2E);
                const reportsFolder = fileSystem.pathToWeb(fileSystem.pathFileRelative(engineVariables.wwwRootFolder, engineVariables.www.reports));
                objectHelper_1.ObjectHelper.addRemove(protractorConfiguration, "mochaOpts", {
                    reporter: "mochawesome-screenshots",
                    reporterOptions: {
                        reportDir: `${reportsFolder}/e2e/`,
                        reportName: "index",
                        takePassedScreenshot: true
                    },
                    timeout: 10000
                }, mainCondition && isE2E);
            }
            const webdriverIoConfiguration = engineVariables.getConfiguration("WebdriverIO");
            if (webdriverIoConfiguration) {
                objectHelper_1.ObjectHelper.addRemove(webdriverIoConfiguration, "framework", "mocha", mainCondition && isE2E);
            }
            return 0;
        });
    }
}
exports.MochaChai = MochaChai;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
