/**
 * Tests for ReadMe.
 */
import * as Chai from "chai";
import * as Sinon from "sinon";
import { IFileSystem } from "unitejs-framework/dist/interfaces/IFileSystem";
import { ILogger } from "unitejs-framework/dist/interfaces/ILogger";
import { UniteConfiguration } from "../../../../../src/configuration/models/unite/uniteConfiguration";
import { EngineVariables } from "../../../../../src/engine/engineVariables";
import { EngineVariablesMeta } from "../../../../../src/engine/engineVariablesMeta";
import { ReadMe } from "../../../../../src/pipelineSteps/content/readMe";
import { FileSystemMock } from "../../fileSystem.mock";

describe("ReadMe", () => {
    let sandbox: Sinon.SinonSandbox;
    let loggerStub: ILogger;
    let loggerInfoSpy: Sinon.SinonSpy;
    let loggerErrorSpy: Sinon.SinonSpy;
    let fileSystemMock: IFileSystem;
    let uniteConfigurationStub: UniteConfiguration;
    let engineVariablesStub: EngineVariables;

    beforeEach(() => {
        sandbox = Sinon.createSandbox();
        loggerStub = <ILogger>{};
        loggerStub.info = () => { };
        loggerStub.error = () => { };
        loggerInfoSpy = sandbox.spy(loggerStub, "info");
        loggerErrorSpy = sandbox.spy(loggerStub, "error");

        fileSystemMock = new FileSystemMock();
        uniteConfigurationStub = new UniteConfiguration();

        engineVariablesStub = new EngineVariables();
        engineVariablesStub.engineAssetsFolder = "./assets/";
        engineVariablesStub.setupDirectories(fileSystemMock, "./test/unit/temp");
    });

    afterEach(async () => {
        sandbox.restore();
        await fileSystemMock.directoryDelete("./test/unit/temp");
    });

    it("can be created", () => {
        const obj = new ReadMe();
        Chai.should().exist(obj);
    });

    describe("finalise", () => {
        it("can fail if an exception is thrown", async () => {
            const obj = new ReadMe();
            const res = await obj.finalise(loggerStub, fileSystemMock, uniteConfigurationStub, engineVariablesStub, true);
            Chai.expect(res).to.be.equal(1);
            Chai.expect(loggerErrorSpy.args[0][0]).contains("failed");
        });

        it("can skip if file has no generated marker", async () => {
            await fileSystemMock.directoryCreate("./test/unit/temp/www/");
            await fileSystemMock.fileWriteLines("./test/unit/temp/", "README.md", []);
            await fileSystemMock.fileWriteLines("./test/unit/temp/www/", "README.md", []);

            const obj = new ReadMe();
            const res = await obj.finalise(loggerStub, fileSystemMock, uniteConfigurationStub, engineVariablesStub, true);
            Chai.expect(res).to.be.equal(0);
            Chai.expect(loggerInfoSpy.args[loggerInfoSpy.args.length - 2][0]).contains("Skipping");
            Chai.expect(loggerInfoSpy.args[loggerInfoSpy.args.length - 1][0]).contains("Skipping");
        });

        it("can write if file has a generated marker and no meta title", async () => {
            await fileSystemMock.directoryCreate("./test/unit/temp/www/");
            await fileSystemMock.fileWriteLines("./test/unit/temp/", "README.md", ["#Old", "", "Generated by UniteJS"]);
            await fileSystemMock.fileWriteLines("./test/unit/temp/www/", "README.md", ["#Old", "", "Generated by UniteJS"]);

            const obj = new ReadMe();
            const res = await obj.finalise(loggerStub, fileSystemMock, uniteConfigurationStub, engineVariablesStub, true);
            Chai.expect(res).to.be.equal(0);
            Chai.expect(loggerInfoSpy.args[loggerInfoSpy.args.length - 2][0]).contains("Writing");
            Chai.expect(loggerInfoSpy.args[loggerInfoSpy.args.length - 1][0]).contains("Writing");

            let lines = await fileSystemMock.fileReadLines("./test/unit/temp/", "README.md");
            Chai.expect(lines.length).to.be.greaterThan(3);
            Chai.expect(lines[0]).to.be.equal("# Generated App");
            Chai.expect(lines[lines.length - 2]).to.be.equal("*Generated by UniteJS* :zap:");

            lines = await fileSystemMock.fileReadLines("./test/unit/temp/www/", "README.md");
            Chai.expect(lines.length).to.be.greaterThan(100);
            Chai.expect(lines[0]).to.be.equal("# Generated App");
            Chai.expect(lines[lines.length - 2]).to.be.equal("*Generated by UniteJS* :zap:");
        });

        it("can write if file has a generated marker", async () => {
            await fileSystemMock.directoryCreate("./test/unit/temp/www/");
            await fileSystemMock.fileWriteLines("./test/unit/temp/", "README.md", ["#Old", "", "Generated by UniteJS"]);
            await fileSystemMock.fileWriteLines("./test/unit/temp/www/", "README.md", ["#Old", "", "Generated by UniteJS"]);

            engineVariablesStub.meta = new EngineVariablesMeta();
            engineVariablesStub.meta.title = "My Title";

            const obj = new ReadMe();
            const res = await obj.finalise(loggerStub, fileSystemMock, uniteConfigurationStub, engineVariablesStub, true);
            Chai.expect(res).to.be.equal(0);
            Chai.expect(loggerInfoSpy.args[loggerInfoSpy.args.length - 2][0]).contains("Writing");
            Chai.expect(loggerInfoSpy.args[loggerInfoSpy.args.length - 1][0]).contains("Writing");

            let lines = await fileSystemMock.fileReadLines("./test/unit/temp/", "README.md");
            Chai.expect(lines.length).to.be.greaterThan(3);
            Chai.expect(lines[0]).to.be.equal("# My Title");
            Chai.expect(lines[lines.length - 2]).to.be.equal("*Generated by UniteJS* :zap:");

            lines = await fileSystemMock.fileReadLines("./test/unit/temp/www/", "README.md");
            Chai.expect(lines.length).to.be.greaterThan(100);
            Chai.expect(lines[0]).to.be.equal("# My Title");
            Chai.expect(lines[lines.length - 2]).to.be.equal("*Generated by UniteJS* :zap:");
        });
    });
});
