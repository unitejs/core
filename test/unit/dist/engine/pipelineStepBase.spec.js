"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Tests for Engine.
 */
const Chai = require("chai");
const Sinon = require("sinon");
const uniteConfiguration_1 = require("../../../../dist/configuration/models/unite/uniteConfiguration");
const engineVariables_1 = require("../../../../dist/engine/engineVariables");
const pipelineStepBase_1 = require("../../../../dist/engine/pipelineStepBase");
const fileSystem_mock_1 = require("../fileSystem.mock");
class TestPipelineStep extends pipelineStepBase_1.PipelineStepBase {
}
describe("PipelineStepBase", () => {
    let sandbox;
    let loggerStub;
    let fileSystemStub;
    let uniteConfigurationStub;
    let engineVariablesStub;
    let loggerInfoSpy;
    let loggerErrorSpy;
    let loggerWarningSpy;
    beforeEach(() => __awaiter(this, void 0, void 0, function* () {
        sandbox = Sinon.createSandbox();
        loggerStub = {};
        loggerStub.info = () => { };
        loggerStub.error = () => { };
        loggerStub.warning = () => { };
        loggerInfoSpy = sandbox.spy(loggerStub, "info");
        loggerErrorSpy = sandbox.spy(loggerStub, "error");
        loggerWarningSpy = sandbox.spy(loggerStub, "warning");
        fileSystemStub = new fileSystem_mock_1.FileSystemMock();
        uniteConfigurationStub = new uniteConfiguration_1.UniteConfiguration();
        engineVariablesStub = new engineVariables_1.EngineVariables();
        yield fileSystemStub.directoryCreate("./test/unit/temp");
    }));
    afterEach(() => __awaiter(this, void 0, void 0, function* () {
        sandbox.restore();
        yield fileSystemStub.directoryDelete("./test/unit/temp");
    }));
    it("can be created", () => {
        const obj = new TestPipelineStep();
        Chai.should().exist(obj);
    });
    describe("mainCondition", () => {
        it("can be called", () => __awaiter(this, void 0, void 0, function* () {
            const obj = new TestPipelineStep();
            const res = obj.mainCondition(uniteConfigurationStub, engineVariablesStub);
            Chai.expect(res).to.be.equal(undefined);
        }));
    });
    describe("initialise", () => {
        it("can be called", () => __awaiter(this, void 0, void 0, function* () {
            const obj = new TestPipelineStep();
            const res = yield obj.initialise(loggerStub, fileSystemStub, uniteConfigurationStub, engineVariablesStub, true);
            Chai.expect(res).to.be.equal(0);
        }));
    });
    describe("configure", () => {
        it("can be called", () => __awaiter(this, void 0, void 0, function* () {
            const obj = new TestPipelineStep();
            const res = yield obj.configure(loggerStub, fileSystemStub, uniteConfigurationStub, engineVariablesStub, true);
            Chai.expect(res).to.be.equal(0);
        }));
    });
    describe("finalise", () => {
        it("can be called", () => __awaiter(this, void 0, void 0, function* () {
            const obj = new TestPipelineStep();
            const res = yield obj.finalise(loggerStub, fileSystemStub, uniteConfigurationStub, engineVariablesStub, true);
            Chai.expect(res).to.be.equal(0);
        }));
    });
    describe("copyFile", () => {
        it("can be called when sourceFile does not exist", () => __awaiter(this, void 0, void 0, function* () {
            const obj = new TestPipelineStep();
            const res = yield obj.copyFile(loggerStub, fileSystemStub, "./test/unit/temp/", "sourceFile.txt", "./test/unit/temp/", "destFile.txt", false, false);
            Chai.expect(res).to.be.equal(1);
            Chai.expect(loggerErrorSpy.args[0][0]).to.contain("exist");
        }));
        it("can be called when destFile does not exist and destFolder does exist", () => __awaiter(this, void 0, void 0, function* () {
            const obj = new TestPipelineStep();
            yield fileSystemStub.fileWriteText("./test/unit/temp/", "sourceFile.txt", "foo-bar");
            const res = yield obj.copyFile(loggerStub, fileSystemStub, "./test/unit/temp/", "sourceFile.txt", "./test/unit/temp/", "destFile.txt", false, false);
            Chai.expect(res).to.be.equal(0);
            Chai.expect(loggerInfoSpy.args[0][0]).to.contain("Copying");
            const newContent = yield fileSystemStub.fileReadText("./test/unit/temp/", "destFile.txt");
            Chai.expect(newContent).to.contain("foo-bar");
        }));
        it("can be called when destFile does not exist and destFolder does not exist", () => __awaiter(this, void 0, void 0, function* () {
            const obj = new TestPipelineStep();
            yield fileSystemStub.fileWriteText("./test/unit/temp/", "sourceFile.txt", "foo-bar");
            const res = yield obj.copyFile(loggerStub, fileSystemStub, "./test/unit/temp/", "sourceFile.txt", "./test/unit/temp/sub/", "destFile.txt", false, false);
            Chai.expect(res).to.be.equal(0);
            Chai.expect(loggerInfoSpy.args[0][0]).to.contain("Copying");
            const newContent = yield fileSystemStub.fileReadText("./test/unit/temp/sub/", "destFile.txt");
            Chai.expect(newContent).to.contain("foo-bar");
        }));
        it("can be called when destFile does exist with no marker", () => __awaiter(this, void 0, void 0, function* () {
            const obj = new TestPipelineStep();
            yield fileSystemStub.fileWriteText("./test/unit/temp/", "sourceFile.txt", "foo-bar");
            yield fileSystemStub.fileWriteText("./test/unit/temp/", "destFile.txt", "bar-foo");
            const res = yield obj.copyFile(loggerStub, fileSystemStub, "./test/unit/temp/", "sourceFile.txt", "./test/unit/temp/", "destFile.txt", false, false);
            Chai.expect(res).to.be.equal(0);
            Chai.expect(loggerInfoSpy.args[0][0]).to.contain("Skipping");
            const newContent = yield fileSystemStub.fileReadText("./test/unit/temp/", "destFile.txt");
            Chai.expect(newContent).to.contain("bar-foo");
        }));
        it("can be called when destFile does exist with marker", () => __awaiter(this, void 0, void 0, function* () {
            const obj = new TestPipelineStep();
            yield fileSystemStub.fileWriteText("./test/unit/temp/", "sourceFile.txt", "foo-bar");
            yield fileSystemStub.fileWriteText("./test/unit/temp/", "destFile.txt", "bar-foo\nGenerated by UniteJS");
            const res = yield obj.copyFile(loggerStub, fileSystemStub, "./test/unit/temp/", "sourceFile.txt", "./test/unit/temp/", "destFile.txt", false, false);
            Chai.expect(res).to.be.equal(0);
            Chai.expect(loggerInfoSpy.args[0][0]).to.contain("Copying");
            const newContent = yield fileSystemStub.fileReadText("./test/unit/temp/", "destFile.txt");
            Chai.expect(newContent).to.contain("foo-bar");
        }));
        it("can be called when destFile does not exist and noCreate is set", () => __awaiter(this, void 0, void 0, function* () {
            const obj = new TestPipelineStep();
            yield fileSystemStub.fileWriteText("./test/unit/temp/", "sourceFile.txt", "foo-bar");
            const res = yield obj.copyFile(loggerStub, fileSystemStub, "./test/unit/temp/", "sourceFile.txt", "./test/unit/temp/", "destFile.txt", false, true);
            Chai.expect(res).to.be.equal(0);
            Chai.expect(loggerInfoSpy.args[0][0]).to.contain("no create");
            const exists = yield fileSystemStub.fileExists("./test/unit/temp/", "destFile.txt");
            Chai.expect(exists).to.be.equal(false);
        }));
        it("can throw exception when copying", () => __awaiter(this, void 0, void 0, function* () {
            sandbox.stub(fileSystemStub, "fileReadText").rejects();
            const obj = new TestPipelineStep();
            yield fileSystemStub.fileWriteText("./test/unit/temp/", "sourceFile.txt", "blah");
            const res = yield obj.copyFile(loggerStub, fileSystemStub, "./test/unit/temp/", "sourceFile.txt", "./test/unit/temp/sub/", "destFile.txt", false, false);
            Chai.expect(res).to.be.equal(1);
            Chai.expect(loggerErrorSpy.args[0][0]).to.contain("failed");
        }));
        it("can copy file with replacements", () => __awaiter(this, void 0, void 0, function* () {
            const obj = new TestPipelineStep();
            yield fileSystemStub.fileWriteText("./test/unit/temp/", "sourceFile.txt", "{SUB1}\n{SUB2}");
            const res = yield obj.copyFile(loggerStub, fileSystemStub, "./test/unit/temp/", "sourceFile.txt", "./test/unit/temp/sub/", "destFile.txt", false, false, {
                "{SUB1}": ["foo"],
                "{SUB2}": ["bar"]
            });
            Chai.expect(res).to.be.equal(0);
            Chai.expect(loggerInfoSpy.args[0][0]).to.contain("Copying");
            const newContent = yield fileSystemStub.fileReadLines("./test/unit/temp/sub/", "destFile.txt");
            Chai.expect(newContent[0]).to.be.equal("foo");
            Chai.expect(newContent[1]).to.be.equal("bar");
        }));
    });
    describe("fileDeleteText", () => {
        it("can be called when file does not exist", () => __awaiter(this, void 0, void 0, function* () {
            const obj = new TestPipelineStep();
            const res = yield obj.fileDeleteText(loggerStub, fileSystemStub, "./test/unit/temp/", "file.txt", false);
            Chai.expect(res).to.be.equal(0);
        }));
        it("can be called when file exists with no marker", () => __awaiter(this, void 0, void 0, function* () {
            const obj = new TestPipelineStep();
            yield fileSystemStub.fileWriteText("./test/unit/temp/", "file.txt", "foo-bar");
            const res = yield obj.fileDeleteText(loggerStub, fileSystemStub, "./test/unit/temp/", "file.txt", false);
            Chai.expect(res).to.be.equal(0);
            Chai.expect(loggerWarningSpy.args[0][0]).to.contain("Skipping");
        }));
        it("can be called when file exists with a marker", () => __awaiter(this, void 0, void 0, function* () {
            const obj = new TestPipelineStep();
            yield fileSystemStub.fileWriteText("./test/unit/temp/", "file.txt", "foo-bar\nGenerated by UniteJS");
            const res = yield obj.fileDeleteText(loggerStub, fileSystemStub, "./test/unit/temp/", "file.txt", false);
            Chai.expect(res).to.be.equal(0);
            Chai.expect(loggerInfoSpy.args[0][0]).to.contain("Deleting");
        }));
        it("can fail when file exists but it throws an error", () => __awaiter(this, void 0, void 0, function* () {
            const obj = new TestPipelineStep();
            yield fileSystemStub.fileWriteText("./test/unit/temp/", "file.txt", "foo-bar\nGenerated by UniteJS");
            sandbox.stub(fileSystemStub, "fileDelete").rejects("error");
            const res = yield obj.fileDeleteText(loggerStub, fileSystemStub, "./test/unit/temp/", "file.txt", false);
            Chai.expect(res).to.be.equal(1);
            Chai.expect(loggerErrorSpy.args[0][0]).to.contain("failed");
        }));
    });
    describe("fileDeleteLines", () => {
        it("can be called when file does not exist", () => __awaiter(this, void 0, void 0, function* () {
            const obj = new TestPipelineStep();
            const res = yield obj.fileDeleteLines(loggerStub, fileSystemStub, "./test/unit/temp/", "file.txt", false);
            Chai.expect(res).to.be.equal(0);
        }));
        it("can be called when file exists with no marker", () => __awaiter(this, void 0, void 0, function* () {
            const obj = new TestPipelineStep();
            yield fileSystemStub.fileWriteText("./test/unit/temp/", "file.txt", "foo-bar");
            const res = yield obj.fileDeleteLines(loggerStub, fileSystemStub, "./test/unit/temp/", "file.txt", false);
            Chai.expect(res).to.be.equal(0);
            Chai.expect(loggerWarningSpy.args[0][0]).to.contain("Skipping");
        }));
        it("can be called when file exists with a marker", () => __awaiter(this, void 0, void 0, function* () {
            const obj = new TestPipelineStep();
            yield fileSystemStub.fileWriteText("./test/unit/temp/", "file.txt", "foo-bar\nGenerated by UniteJS");
            const res = yield obj.fileDeleteLines(loggerStub, fileSystemStub, "./test/unit/temp/", "file.txt", false);
            Chai.expect(res).to.be.equal(0);
            Chai.expect(loggerInfoSpy.args[0][0]).to.contain("Deleting");
        }));
        it("can fail when file exists but it throws an error", () => __awaiter(this, void 0, void 0, function* () {
            const obj = new TestPipelineStep();
            yield fileSystemStub.fileWriteText("./test/unit/temp/", "file.txt", "foo-bar\nGenerated by UniteJS");
            sandbox.stub(fileSystemStub, "fileDelete").rejects("error");
            const res = yield obj.fileDeleteLines(loggerStub, fileSystemStub, "./test/unit/temp/", "file.txt", false);
            Chai.expect(res).to.be.equal(1);
            Chai.expect(loggerErrorSpy.args[0][0]).to.contain("failed");
        }));
    });
    describe("fileDeleteJson", () => {
        it("can be called when file does not exist", () => __awaiter(this, void 0, void 0, function* () {
            const obj = new TestPipelineStep();
            const res = yield obj.fileDeleteJson(loggerStub, fileSystemStub, "./test/unit/temp/", "file.json", false);
            Chai.expect(res).to.be.equal(0);
        }));
        it("can fail when file exists but it throws an error", () => __awaiter(this, void 0, void 0, function* () {
            const obj = new TestPipelineStep();
            yield fileSystemStub.fileWriteText("./test/unit/temp/", "file.json", "{}");
            sandbox.stub(fileSystemStub, "fileDelete").rejects("error");
            const res = yield obj.fileDeleteJson(loggerStub, fileSystemStub, "./test/unit/temp/", "file.json", false);
            Chai.expect(res).to.be.equal(1);
            Chai.expect(loggerErrorSpy.args[0][0]).to.contain("failed");
        }));
    });
    describe("folderCreate", () => {
        it("can be called", () => __awaiter(this, void 0, void 0, function* () {
            const obj = new TestPipelineStep();
            const res = yield obj.folderCreate(loggerStub, fileSystemStub, "./test/unit/temp/blah");
            Chai.expect(res).to.be.equal(0);
            const exists = yield fileSystemStub.directoryExists("./test/unit/temp/blah");
            Chai.expect(exists).to.be.equal(true);
        }));
        it("can fail when file exists but it throws an error", () => __awaiter(this, void 0, void 0, function* () {
            const obj = new TestPipelineStep();
            sandbox.stub(fileSystemStub, "directoryCreate").rejects("error");
            const res = yield obj.folderCreate(loggerStub, fileSystemStub, "./test/unit/temp/blah/");
            Chai.expect(res).to.be.equal(1);
            Chai.expect(loggerErrorSpy.args[0][0]).to.contain("failed");
        }));
    });
    describe("folderDelete", () => {
        it("can fail when it throws an exception", () => __awaiter(this, void 0, void 0, function* () {
            sandbox.stub(fileSystemStub, "directoryExists").throws();
            const obj = new TestPipelineStep();
            const res = yield obj.folderDelete(loggerStub, fileSystemStub, "./test/unit/temp/blah", true);
            Chai.expect(res).to.be.equal(1);
        }));
        it("can be called when folder does not exist", () => __awaiter(this, void 0, void 0, function* () {
            const obj = new TestPipelineStep();
            const res = yield obj.folderDelete(loggerStub, fileSystemStub, "./test/unit/temp/blah", true);
            Chai.expect(res).to.be.equal(0);
            const exists = yield fileSystemStub.directoryExists("./test/unit/temp/blah");
            Chai.expect(exists).to.be.equal(false);
        }));
        it("can be called when folder exists and forced", () => __awaiter(this, void 0, void 0, function* () {
            yield fileSystemStub.directoryCreate("./test/unit/temp/blah");
            const obj = new TestPipelineStep();
            const res = yield obj.folderDelete(loggerStub, fileSystemStub, "./test/unit/temp/blah", true);
            Chai.expect(res).to.be.equal(0);
            const exists = yield fileSystemStub.directoryExists("./test/unit/temp/blah");
            Chai.expect(exists).to.be.equal(false);
        }));
        it("can be called when folder exists and not forced", () => __awaiter(this, void 0, void 0, function* () {
            yield fileSystemStub.directoryCreate("./test/unit/temp/blah");
            const obj = new TestPipelineStep();
            const res = yield obj.folderDelete(loggerStub, fileSystemStub, "./test/unit/temp/blah", false);
            Chai.expect(res).to.be.equal(0);
            const exists = yield fileSystemStub.directoryExists("./test/unit/temp/blah");
            Chai.expect(exists).to.be.equal(false);
        }));
        it("can be called when folder exists and not forced with marker files", () => __awaiter(this, void 0, void 0, function* () {
            yield fileSystemStub.directoryCreate("./test/unit/temp/blah");
            yield fileSystemStub.directoryCreate("./test/unit/temp/blah/blah1");
            yield fileSystemStub.directoryCreate("./test/unit/temp/blah/blah2");
            yield fileSystemStub.fileWriteText("./test/unit/temp/blah/blah2", "a.txt", "Generated by UniteJS");
            yield fileSystemStub.fileWriteText("./test/unit/temp/blah/blah2", "b.txt", "");
            const obj = new TestPipelineStep();
            const res = yield obj.folderDelete(loggerStub, fileSystemStub, "./test/unit/temp/blah", false);
            Chai.expect(res).to.be.equal(0);
            Chai.expect(loggerWarningSpy.args[0][0]).to.contain("Partial");
            let exists = yield fileSystemStub.directoryExists("./test/unit/temp/blah");
            Chai.expect(exists).to.be.equal(true);
            exists = yield fileSystemStub.directoryExists("./test/unit/temp/blah1");
            Chai.expect(exists).to.be.equal(false);
            exists = yield fileSystemStub.fileExists("./test/unit/temp/blah/blah2/", "a.txt");
            Chai.expect(exists).to.be.equal(false);
            exists = yield fileSystemStub.fileExists("./test/unit/temp/blah/blah2/", "b.txt");
            Chai.expect(exists).to.be.equal(true);
        }));
    });
    describe("folderToggle", () => {
        it("can be called to create folder", () => __awaiter(this, void 0, void 0, function* () {
            const obj = new TestPipelineStep();
            const res = yield obj.folderToggle(loggerStub, fileSystemStub, "./test/unit/temp/blah", false, true);
            Chai.expect(res).to.be.equal(0);
            const exists = yield fileSystemStub.directoryExists("./test/unit/temp/blah");
            Chai.expect(exists).to.be.equal(true);
        }));
        it("can be called to delete folder", () => __awaiter(this, void 0, void 0, function* () {
            yield fileSystemStub.directoryCreate("./test/unit/temp/blah");
            const obj = new TestPipelineStep();
            const res = yield obj.folderToggle(loggerStub, fileSystemStub, "./test/unit/temp/blah", false, false);
            Chai.expect(res).to.be.equal(0);
            const exists = yield fileSystemStub.directoryExists("./test/unit/temp/blah");
            Chai.expect(exists).to.be.equal(false);
        }));
    });
    describe("wrapGeneratedMarker", () => {
        it("can be called", () => __awaiter(this, void 0, void 0, function* () {
            const obj = new TestPipelineStep();
            const res = obj.wrapGeneratedMarker("before", "after");
            Chai.expect(res).to.be.equal("beforeGenerated by UniteJSafter");
        }));
    });
    describe("fileHasGeneratedMarker", () => {
        it("can be called when file does not exist", () => __awaiter(this, void 0, void 0, function* () {
            const obj = new TestPipelineStep();
            const res = yield obj.fileHasGeneratedMarker(fileSystemStub, "./test/unit/temp/", "file.txt");
            Chai.expect(res).to.be.equal("FileNotExist");
        }));
        it("can be called when file does exist with no marker", () => __awaiter(this, void 0, void 0, function* () {
            const obj = new TestPipelineStep();
            yield fileSystemStub.fileWriteText("./test/unit/temp/", "file.txt", "foo-bar");
            const res = yield obj.fileHasGeneratedMarker(fileSystemStub, "./test/unit/temp/", "file.txt");
            Chai.expect(res).to.be.equal("NoMarker");
        }));
        it("can be called when file does exist with a marker", () => __awaiter(this, void 0, void 0, function* () {
            const obj = new TestPipelineStep();
            yield fileSystemStub.fileWriteText("./test/unit/temp/", "file.txt", "foo-bar\nGenerated by UniteJS");
            const res = yield obj.fileHasGeneratedMarker(fileSystemStub, "./test/unit/temp/", "file.txt");
            Chai.expect(res).to.be.equal("HasMarker");
        }));
        it("can be called when file does exist with a marker not on the last line", () => __awaiter(this, void 0, void 0, function* () {
            const obj = new TestPipelineStep();
            yield fileSystemStub.fileWriteText("./test/unit/temp/", "file.txt", "foo-bar\nGenerated by UniteJS\n\n\n");
            const res = yield obj.fileHasGeneratedMarker(fileSystemStub, "./test/unit/temp/", "file.txt");
            Chai.expect(res).to.be.equal("HasMarker");
        }));
        it("can be called when file throws an error", () => __awaiter(this, void 0, void 0, function* () {
            const obj = new TestPipelineStep();
            sandbox.stub(fileSystemStub, "fileExists").rejects("error");
            yield fileSystemStub.fileWriteText("./test/unit/temp/", "file.txt", "foo-bar\nGenerated by UniteJS\n\n\n");
            const res = yield obj.fileHasGeneratedMarker(fileSystemStub, "./test/unit/temp/", "file.txt");
            Chai.expect(res).to.be.equal("FileNotExist");
        }));
    });
    describe("fileReadJson", () => {
        it("can be called when file does not exist", () => __awaiter(this, void 0, void 0, function* () {
            const obj = new TestPipelineStep();
            let retObj;
            const res = yield obj.fileReadJson(loggerStub, fileSystemStub, "./test/unit/temp/", "file.json", false, (cbObj) => __awaiter(this, void 0, void 0, function* () {
                retObj = cbObj;
                return 0;
            }));
            Chai.expect(res).to.be.equal(0);
            Chai.expect(retObj).to.be.equal(undefined);
        }));
        it("can be called when file does exist", () => __awaiter(this, void 0, void 0, function* () {
            yield fileSystemStub.fileWriteJson("./test/unit/temp/", "file.json", { a: 1 });
            const obj = new TestPipelineStep();
            let retObj;
            const res = yield obj.fileReadJson(loggerStub, fileSystemStub, "./test/unit/temp/", "file.json", false, (cbObj) => __awaiter(this, void 0, void 0, function* () {
                retObj = cbObj;
                return 0;
            }));
            Chai.expect(res).to.be.equal(0);
            Chai.expect(retObj).to.be.deep.equal({ a: 1 });
        }));
        it("can be called when file does exist but force is set", () => __awaiter(this, void 0, void 0, function* () {
            yield fileSystemStub.fileWriteJson("./test/unit/temp/", "file.json", { a: 1 });
            const obj = new TestPipelineStep();
            let retObj;
            const res = yield obj.fileReadJson(loggerStub, fileSystemStub, "./test/unit/temp/", "file.json", true, (cbObj) => __awaiter(this, void 0, void 0, function* () {
                retObj = cbObj;
                return 0;
            }));
            Chai.expect(res).to.be.equal(0);
            Chai.expect(retObj).to.be.equal(undefined);
        }));
        it("can fail when an exception is thrown", () => __awaiter(this, void 0, void 0, function* () {
            sandbox.stub(fileSystemStub, "fileExists").rejects("error!");
            yield fileSystemStub.fileWriteJson("./test/unit/temp/", "file.json", { a: 1 });
            const obj = new TestPipelineStep();
            let retObj = { a: 2 };
            const res = yield obj.fileReadJson(loggerStub, fileSystemStub, "./test/unit/temp/", "file.json", false, (cbObj) => __awaiter(this, void 0, void 0, function* () {
                retObj = cbObj;
                return 0;
            }));
            Chai.expect(res).to.be.equal(1);
            Chai.expect(retObj).to.be.deep.equal({ a: 2 });
        }));
    });
    describe("fileReadText", () => {
        it("can be called when file does not exist", () => __awaiter(this, void 0, void 0, function* () {
            const obj = new TestPipelineStep();
            let retObj;
            const res = yield obj.fileReadText(loggerStub, fileSystemStub, "./test/unit/temp/", "file.txt", false, (cbObj) => __awaiter(this, void 0, void 0, function* () {
                retObj = cbObj;
                return 0;
            }));
            Chai.expect(res).to.be.equal(0);
            Chai.expect(retObj).to.be.equal(undefined);
        }));
        it("can be called when file does exist", () => __awaiter(this, void 0, void 0, function* () {
            yield fileSystemStub.fileWriteText("./test/unit/temp/", "file.txt", "blah");
            const obj = new TestPipelineStep();
            let retObj;
            const res = yield obj.fileReadText(loggerStub, fileSystemStub, "./test/unit/temp/", "file.txt", false, (cbObj) => __awaiter(this, void 0, void 0, function* () {
                retObj = cbObj;
                return 0;
            }));
            Chai.expect(res).to.be.equal(0);
            Chai.expect(retObj).to.be.equal("blah");
        }));
        it("can be called when file does exist but force is set", () => __awaiter(this, void 0, void 0, function* () {
            yield fileSystemStub.fileWriteText("./test/unit/temp/", "file.txt", "blah");
            const obj = new TestPipelineStep();
            let retObj;
            const res = yield obj.fileReadText(loggerStub, fileSystemStub, "./test/unit/temp/", "file.txt", true, (cbObj) => __awaiter(this, void 0, void 0, function* () {
                retObj = cbObj;
                return 0;
            }));
            Chai.expect(res).to.be.equal(0);
            Chai.expect(retObj).to.be.equal(undefined);
        }));
        it("can fail when an exception is thrown", () => __awaiter(this, void 0, void 0, function* () {
            sandbox.stub(fileSystemStub, "fileExists").rejects("error!");
            yield fileSystemStub.fileWriteText("./test/unit/temp/", "file.txt", "bar");
            const obj = new TestPipelineStep();
            let retObj = "foo";
            const res = yield obj.fileReadText(loggerStub, fileSystemStub, "./test/unit/temp/", "file.txt", false, (cbObj) => __awaiter(this, void 0, void 0, function* () {
                retObj = cbObj;
                return 0;
            }));
            Chai.expect(res).to.be.equal(1);
            Chai.expect(retObj).to.be.equal("foo");
        }));
    });
    describe("fileReadLines", () => {
        it("can be called when file does not exist", () => __awaiter(this, void 0, void 0, function* () {
            const obj = new TestPipelineStep();
            let retObj;
            const res = yield obj.fileReadLines(loggerStub, fileSystemStub, "./test/unit/temp/", "file.txt", false, (cbObj) => __awaiter(this, void 0, void 0, function* () {
                retObj = cbObj;
                return 0;
            }));
            Chai.expect(res).to.be.equal(0);
            Chai.expect(retObj).to.be.deep.equal([]);
        }));
        it("can be called when file does exist", () => __awaiter(this, void 0, void 0, function* () {
            yield fileSystemStub.fileWriteLines("./test/unit/temp/", "file.txt", ["blah"]);
            const obj = new TestPipelineStep();
            let retObj;
            const res = yield obj.fileReadLines(loggerStub, fileSystemStub, "./test/unit/temp/", "file.txt", false, (cbObj) => __awaiter(this, void 0, void 0, function* () {
                retObj = cbObj;
                return 0;
            }));
            Chai.expect(res).to.be.equal(0);
            Chai.expect(retObj).to.be.deep.equal(["blah", ""]);
        }));
        it("can be called when file does exist but force is set", () => __awaiter(this, void 0, void 0, function* () {
            yield fileSystemStub.fileWriteLines("./test/unit/temp/", "file.txt", ["blah"]);
            const obj = new TestPipelineStep();
            let retObj;
            const res = yield obj.fileReadLines(loggerStub, fileSystemStub, "./test/unit/temp/", "file.txt", true, (cbObj) => __awaiter(this, void 0, void 0, function* () {
                retObj = cbObj;
                return 0;
            }));
            Chai.expect(res).to.be.equal(0);
            Chai.expect(retObj).to.be.deep.equal([]);
        }));
        it("can fail when an exception is thrown", () => __awaiter(this, void 0, void 0, function* () {
            sandbox.stub(fileSystemStub, "fileExists").rejects("error!");
            yield fileSystemStub.fileWriteLines("./test/unit/temp/", "file.txt", ["bar"]);
            const obj = new TestPipelineStep();
            let retObj = ["foo"];
            const res = yield obj.fileReadLines(loggerStub, fileSystemStub, "./test/unit/temp/", "file.txt", false, (cbObj) => __awaiter(this, void 0, void 0, function* () {
                retObj = cbObj;
                return 0;
            }));
            Chai.expect(res).to.be.equal(1);
            Chai.expect(retObj).to.be.deep.equal(["foo"]);
        }));
    });
    describe("fileWriteLines", () => {
        it("can be called when file does not exist", () => __awaiter(this, void 0, void 0, function* () {
            const obj = new TestPipelineStep();
            let callbackCalled;
            const res = yield obj.fileWriteLines(loggerStub, fileSystemStub, "./test/unit/temp/", "file.txt", false, () => __awaiter(this, void 0, void 0, function* () {
                callbackCalled = true;
                return [];
            }));
            Chai.expect(res).to.be.equal(0);
            Chai.expect(callbackCalled).to.be.equal(true);
        }));
        it("can be called when file does exist with marker", () => __awaiter(this, void 0, void 0, function* () {
            yield fileSystemStub.fileWriteLines("./test/unit/temp/", "file.txt", ["Generated by UniteJS"]);
            const obj = new TestPipelineStep();
            let callbackCalled;
            const res = yield obj.fileWriteLines(loggerStub, fileSystemStub, "./test/unit/temp/", "file.txt", false, () => __awaiter(this, void 0, void 0, function* () {
                callbackCalled = true;
                return [];
            }));
            Chai.expect(res).to.be.equal(0);
            Chai.expect(callbackCalled).to.be.equal(true);
        }));
        it("can be called when file does exist with no marker", () => __awaiter(this, void 0, void 0, function* () {
            yield fileSystemStub.fileWriteLines("./test/unit/temp/", "file.txt", ["blah"]);
            const obj = new TestPipelineStep();
            let callbackCalled = false;
            const res = yield obj.fileWriteLines(loggerStub, fileSystemStub, "./test/unit/temp/", "file.txt", false, () => __awaiter(this, void 0, void 0, function* () {
                callbackCalled = true;
                return [];
            }));
            Chai.expect(res).to.be.equal(0);
            Chai.expect(callbackCalled).to.be.equal(false);
        }));
        it("can be called and throw an exception", () => __awaiter(this, void 0, void 0, function* () {
            yield fileSystemStub.fileWriteLines("./test/unit/temp/", "file.txt", ["Generated by UniteJS"]);
            sandbox.stub(fileSystemStub, "fileWriteLines").rejects();
            const obj = new TestPipelineStep();
            const res = yield obj.fileWriteLines(loggerStub, fileSystemStub, "./test/unit/temp/", "file.txt", false, () => __awaiter(this, void 0, void 0, function* () { return []; }));
            Chai.expect(res).to.be.equal(1);
        }));
    });
    describe("fileWriteText", () => {
        it("can be called when file does not exist", () => __awaiter(this, void 0, void 0, function* () {
            const obj = new TestPipelineStep();
            let callbackCalled;
            const res = yield obj.fileWriteText(loggerStub, fileSystemStub, "./test/unit/temp/", "file.txt", false, () => __awaiter(this, void 0, void 0, function* () {
                callbackCalled = true;
                return "";
            }));
            Chai.expect(res).to.be.equal(0);
            Chai.expect(callbackCalled).to.be.equal(true);
        }));
        it("can be called when file does exist with marker", () => __awaiter(this, void 0, void 0, function* () {
            yield fileSystemStub.fileWriteLines("./test/unit/temp/", "file.txt", ["Generated by UniteJS"]);
            const obj = new TestPipelineStep();
            let callbackCalled;
            const res = yield obj.fileWriteText(loggerStub, fileSystemStub, "./test/unit/temp/", "file.txt", false, () => __awaiter(this, void 0, void 0, function* () {
                callbackCalled = true;
                return "";
            }));
            Chai.expect(res).to.be.equal(0);
            Chai.expect(callbackCalled).to.be.equal(true);
        }));
        it("can be called and throw an exception", () => __awaiter(this, void 0, void 0, function* () {
            yield fileSystemStub.fileWriteLines("./test/unit/temp/", "file.txt", ["Generated by UniteJS"]);
            sandbox.stub(fileSystemStub, "fileWriteText").rejects();
            const obj = new TestPipelineStep();
            const res = yield obj.fileWriteText(loggerStub, fileSystemStub, "./test/unit/temp/", "file.txt", false, () => __awaiter(this, void 0, void 0, function* () { return ""; }));
            Chai.expect(res).to.be.equal(1);
        }));
    });
    describe("fileWriteJson", () => {
        it("can be called when file does not exist", () => __awaiter(this, void 0, void 0, function* () {
            const obj = new TestPipelineStep();
            let callbackCalled;
            const res = yield obj.fileWriteJson(loggerStub, fileSystemStub, "./test/unit/temp/", "file.txt", false, () => __awaiter(this, void 0, void 0, function* () {
                callbackCalled = true;
                return {};
            }));
            Chai.expect(res).to.be.equal(0);
            Chai.expect(callbackCalled).to.be.equal(true);
        }));
        it("can be called when file does exist with marker", () => __awaiter(this, void 0, void 0, function* () {
            yield fileSystemStub.fileWriteLines("./test/unit/temp/", "file.txt", ["Generated by UniteJS"]);
            const obj = new TestPipelineStep();
            let callbackCalled;
            const res = yield obj.fileWriteJson(loggerStub, fileSystemStub, "./test/unit/temp/", "file.txt", false, () => __awaiter(this, void 0, void 0, function* () {
                callbackCalled = true;
                return {};
            }));
            Chai.expect(res).to.be.equal(0);
            Chai.expect(callbackCalled).to.be.equal(true);
        }));
        it("can be called and throw an exception", () => __awaiter(this, void 0, void 0, function* () {
            yield fileSystemStub.fileWriteLines("./test/unit/temp/", "file.txt", ["Generated by UniteJS"]);
            sandbox.stub(fileSystemStub, "fileWriteJson").rejects();
            const obj = new TestPipelineStep();
            const res = yield obj.fileWriteJson(loggerStub, fileSystemStub, "./test/unit/temp/", "file.txt", false, () => __awaiter(this, void 0, void 0, function* () { }));
            Chai.expect(res).to.be.equal(1);
        }));
    });
    describe("fileToggleText", () => {
        it("can be called to write file", () => __awaiter(this, void 0, void 0, function* () {
            const obj = new TestPipelineStep();
            let callbackCalled = false;
            const res = yield obj.fileToggleText(loggerStub, fileSystemStub, "./test/unit/temp/", "file.txt", false, true, () => __awaiter(this, void 0, void 0, function* () {
                callbackCalled = true;
                return "";
            }));
            Chai.expect(res).to.be.equal(0);
            Chai.expect(callbackCalled).to.be.equal(true);
        }));
        it("can be called to delete file", () => __awaiter(this, void 0, void 0, function* () {
            const obj = new TestPipelineStep();
            let callbackCalled = false;
            const res = yield obj.fileToggleText(loggerStub, fileSystemStub, "./test/unit/temp/", "file.txt", false, false, () => __awaiter(this, void 0, void 0, function* () {
                callbackCalled = true;
                return "";
            }));
            Chai.expect(res).to.be.equal(0);
            Chai.expect(callbackCalled).to.be.equal(false);
        }));
    });
    describe("fileToggleJson", () => {
        it("can be called to write file", () => __awaiter(this, void 0, void 0, function* () {
            const obj = new TestPipelineStep();
            let callbackCalled = false;
            const res = yield obj.fileToggleJson(loggerStub, fileSystemStub, "./test/unit/temp/", "file.txt", false, true, () => __awaiter(this, void 0, void 0, function* () {
                callbackCalled = true;
                return {};
            }));
            Chai.expect(res).to.be.equal(0);
            Chai.expect(callbackCalled).to.be.equal(true);
        }));
        it("can be called to delete file", () => __awaiter(this, void 0, void 0, function* () {
            const obj = new TestPipelineStep();
            let callbackCalled = false;
            const res = yield obj.fileToggleJson(loggerStub, fileSystemStub, "./test/unit/temp/", "file.txt", false, false, () => __awaiter(this, void 0, void 0, function* () {
                callbackCalled = true;
                return {};
            }));
            Chai.expect(res).to.be.equal(0);
            Chai.expect(callbackCalled).to.be.equal(false);
        }));
    });
    describe("fileToggleLines", () => {
        it("can be called to write file", () => __awaiter(this, void 0, void 0, function* () {
            const obj = new TestPipelineStep();
            let callbackCalled = false;
            const res = yield obj.fileToggleLines(loggerStub, fileSystemStub, "./test/unit/temp/", "file.txt", false, true, () => __awaiter(this, void 0, void 0, function* () {
                callbackCalled = true;
                return [];
            }));
            Chai.expect(res).to.be.equal(0);
            Chai.expect(callbackCalled).to.be.equal(true);
        }));
        it("can be called to delete file", () => __awaiter(this, void 0, void 0, function* () {
            const obj = new TestPipelineStep();
            let callbackCalled = false;
            const res = yield obj.fileToggleLines(loggerStub, fileSystemStub, "./test/unit/temp/", "file.txt", false, false, () => __awaiter(this, void 0, void 0, function* () {
                callbackCalled = true;
                return [];
            }));
            Chai.expect(res).to.be.equal(0);
            Chai.expect(callbackCalled).to.be.equal(false);
        }));
    });
    describe("condition", () => {
        it("can be called when condition is true", () => __awaiter(this, void 0, void 0, function* () {
            const obj = new TestPipelineStep();
            const res = obj.condition("blah", "BLAH");
            Chai.expect(res).to.be.equal(true);
        }));
        it("can be called when condition is false", () => __awaiter(this, void 0, void 0, function* () {
            const obj = new TestPipelineStep();
            const res = obj.condition("blah", "blah2");
            Chai.expect(res).to.be.equal(false);
        }));
    });
    describe("objectCondition", () => {
        it("can be called when condition is true", () => __awaiter(this, void 0, void 0, function* () {
            const obj = new TestPipelineStep();
            const res = obj.objectCondition({ blah: 1 }, "BLAH");
            Chai.expect(res).to.be.equal(true);
        }));
        it("can be called when condition is false", () => __awaiter(this, void 0, void 0, function* () {
            const obj = new TestPipelineStep();
            const res = obj.objectCondition({ blah: 1 }, "blah2");
            Chai.expect(res).to.be.equal(false);
        }));
    });
    describe("arrayCondition", () => {
        it("can be called when condition is true", () => __awaiter(this, void 0, void 0, function* () {
            const obj = new TestPipelineStep();
            const res = obj.arrayCondition(["blah"], "BLAH");
            Chai.expect(res).to.be.equal(true);
        }));
        it("can be called when condition is false", () => __awaiter(this, void 0, void 0, function* () {
            const obj = new TestPipelineStep();
            const res = obj.arrayCondition(["blah"], "BLAH2");
            Chai.expect(res).to.be.equal(false);
        }));
    });
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,
