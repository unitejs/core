"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Tests for SharedAppFramework.
 */
const Chai = require("chai");
const Sinon = require("sinon");
const uniteConfiguration_1 = require("../../../../dist/configuration/models/unite/uniteConfiguration");
const engineVariables_1 = require("../../../../dist/engine/engineVariables");
const sharedAppFramework_1 = require("../../../../dist/pipelineSteps/sharedAppFramework");
const fileSystem_mock_1 = require("../fileSystem.mock");
class TestSharedAppFramework extends sharedAppFramework_1.SharedAppFramework {
    constructor() {
        super();
        this.customUnitTests = false;
        this.appModuleName = "app";
        this.htmlFiles = ["app.html"];
        this.appCssFiles = ["child/child"];
    }
    finalise(logger, fileSystem, uniteConfiguration, engineVariables, mainCondition) {
        const _super = name => super[name];
        return __awaiter(this, void 0, void 0, function* () {
            let ret = yield this.generateAppSource(logger, fileSystem, uniteConfiguration, engineVariables, [`${this.appModuleName}.js`], false);
            if (ret === 0) {
                ret = yield this.generateAppSource(logger, fileSystem, uniteConfiguration, engineVariables, [`entryPoint.js`], true);
            }
            if (ret === 0) {
                ret = yield _super("generateAppHtml").call(this, logger, fileSystem, uniteConfiguration, engineVariables, this.htmlFiles);
            }
            if (ret === 0) {
                ret = yield _super("generateAppCss").call(this, logger, fileSystem, uniteConfiguration, engineVariables, this.appCssFiles);
            }
            if (ret === 0) {
                ret = yield _super("generateE2eTest").call(this, logger, fileSystem, uniteConfiguration, engineVariables, ["app.spec.js"], true);
            }
            if (ret === 0) {
                ret = yield _super("generateE2eTest").call(this, logger, fileSystem, uniteConfiguration, engineVariables, [], false);
            }
            if (ret === 0) {
                ret = yield this.generateUnitTest(logger, fileSystem, uniteConfiguration, engineVariables, [`${this.appModuleName}.spec.js`], !this.customUnitTests);
            }
            if (ret === 0) {
                ret = yield _super("generateCss").call(this, logger, fileSystem, uniteConfiguration, engineVariables);
            }
            return ret;
        });
    }
    testCreateLoaderReplacement(engineVariables, extension, loader, includeRequires) {
        return super.createLoaderReplacement(engineVariables, extension, loader, includeRequires);
    }
    testCreateLoaderTypeMapReplacement(engineVariables, extension, loader) {
        return super.createLoaderTypeMapReplacement(engineVariables, extension, loader);
    }
    testInsertContent(logger, fileSystem, engineVariables, file, inserter) {
        const _super = name => super[name];
        return __awaiter(this, void 0, void 0, function* () {
            return _super("insertContent").call(this, logger, fileSystem, engineVariables, file, inserter);
        });
    }
    testInsertReplaceImports(srcContent, sourceItems) {
        return super.insertReplaceImports(srcContent, sourceItems);
    }
    testInsertCompletion(logger, remainingInserts, routes) {
        return super.insertCompletion(logger, remainingInserts, routes);
    }
}
describe("SharedAppFramework", () => {
    let sandbox;
    let loggerStub;
    let uniteConfigurationStub;
    let engineVariablesStub;
    let fileSystemMock;
    let loggerErrorSpy;
    let loggerBannerSpy;
    let loggerWarningSpy;
    beforeEach(() => {
        sandbox = Sinon.createSandbox();
        loggerStub = {};
        loggerStub.info = () => { };
        loggerStub.error = () => { };
        loggerStub.banner = () => { };
        loggerStub.warning = () => { };
        loggerErrorSpy = sandbox.spy(loggerStub, "error");
        loggerBannerSpy = sandbox.spy(loggerStub, "banner");
        loggerWarningSpy = sandbox.spy(loggerStub, "warning");
        fileSystemMock = new fileSystem_mock_1.FileSystemMock();
        uniteConfigurationStub = new uniteConfiguration_1.UniteConfiguration();
        uniteConfigurationStub.applicationFramework = "Aurelia";
        uniteConfigurationStub.moduleType = "AMD";
        uniteConfigurationStub.bundler = "RequireJS";
        uniteConfigurationStub.unitTestRunner = "Karma";
        uniteConfigurationStub.unitTestFramework = "Jasmine";
        uniteConfigurationStub.e2eTestRunner = "Protractor";
        uniteConfigurationStub.e2eTestFramework = "Jasmine";
        uniteConfigurationStub.sourceLanguage = "JavaScript";
        uniteConfigurationStub.linter = "ESLint";
        uniteConfigurationStub.cssPre = "Css";
        uniteConfigurationStub.cssPost = "None";
        uniteConfigurationStub.clientPackages = {};
        uniteConfigurationStub.sourceExtensions = ["js"];
        uniteConfigurationStub.styleExtension = "css";
        engineVariablesStub = new engineVariables_1.EngineVariables();
        engineVariablesStub.engineAssetsFolder = "./assets/";
        engineVariablesStub.setupDirectories(fileSystemMock, "./test/unit/temp");
        engineVariablesStub.findDependencyVersion = sandbox.stub().returns("1.2.3");
    });
    afterEach(() => __awaiter(this, void 0, void 0, function* () {
        sandbox.restore();
        yield fileSystemMock.directoryDelete("./test/unit/temp");
    }));
    it("can be created", () => __awaiter(this, void 0, void 0, function* () {
        const obj = new TestSharedAppFramework();
        Chai.should().exist(obj);
    }));
    describe("finalise", () => {
        it("can fail with no source", () => __awaiter(this, void 0, void 0, function* () {
            const stub = sandbox.stub(fileSystemMock, "fileReadText");
            stub.callsFake((directoryName, fileName) => __awaiter(this, void 0, void 0, function* () {
                if (fileName.endsWith("js")) {
                    return Promise.reject("error");
                }
                else {
                    return new fileSystem_mock_1.FileSystemMock().fileReadText(directoryName, fileName);
                }
            }));
            const obj = new TestSharedAppFramework();
            const res = yield obj.finalise(loggerStub, fileSystemMock, uniteConfigurationStub, engineVariablesStub, true);
            Chai.expect(res).to.be.equal(1);
            const exists = yield fileSystemMock.fileExists("./test/unit/temp/www/src/", "app.js");
            Chai.expect(exists).to.be.equal(false);
        }));
        it("can fail with no html", () => __awaiter(this, void 0, void 0, function* () {
            const stub = sandbox.stub(fileSystemMock, "fileReadText");
            stub.callsFake((directoryName, fileName) => __awaiter(this, void 0, void 0, function* () {
                if (fileName.endsWith("html")) {
                    return Promise.reject("error");
                }
                else {
                    return new fileSystem_mock_1.FileSystemMock().fileReadText(directoryName, fileName);
                }
            }));
            const obj = new TestSharedAppFramework();
            const res = yield obj.finalise(loggerStub, fileSystemMock, uniteConfigurationStub, engineVariablesStub, true);
            Chai.expect(res).to.be.equal(1);
            let exists = yield fileSystemMock.fileExists("./test/unit/temp/www/src/", "app.js");
            Chai.expect(exists).to.be.equal(true);
            exists = yield fileSystemMock.fileExists("./test/unit/temp/www/src/", "app.html");
            Chai.expect(exists).to.be.equal(false);
        }));
        it("can fail with no app css", () => __awaiter(this, void 0, void 0, function* () {
            const stub = sandbox.stub(fileSystemMock, "fileReadText");
            stub.callsFake((directoryName, fileName) => __awaiter(this, void 0, void 0, function* () {
                if (fileName.endsWith("css")) {
                    return Promise.reject("error");
                }
                else {
                    return new fileSystem_mock_1.FileSystemMock().fileReadText(directoryName, fileName);
                }
            }));
            const obj = new TestSharedAppFramework();
            const res = yield obj.finalise(loggerStub, fileSystemMock, uniteConfigurationStub, engineVariablesStub, true);
            Chai.expect(res).to.be.equal(1);
            let exists = yield fileSystemMock.fileExists("./test/unit/temp/www/src/", "app.html");
            Chai.expect(exists).to.be.equal(true);
            exists = yield fileSystemMock.fileExists("./test/unit/temp/www/src/child/", "child.css");
            Chai.expect(exists).to.be.equal(false);
        }));
        it("can fail with no e2e tests", () => __awaiter(this, void 0, void 0, function* () {
            const stub = sandbox.stub(fileSystemMock, "fileReadText");
            stub.callsFake((directoryName, fileName) => __awaiter(this, void 0, void 0, function* () {
                if (fileName.endsWith("spec.js")) {
                    return Promise.reject("error");
                }
                else {
                    return new fileSystem_mock_1.FileSystemMock().fileReadText(directoryName, fileName);
                }
            }));
            const obj = new TestSharedAppFramework();
            const res = yield obj.finalise(loggerStub, fileSystemMock, uniteConfigurationStub, engineVariablesStub, true);
            Chai.expect(res).to.be.equal(1);
            let exists = yield fileSystemMock.fileExists("./test/unit/temp/www/src/child/", "child.css");
            Chai.expect(exists).to.be.equal(true);
            exists = yield fileSystemMock.fileExists("./test/unit/temp/www/test/e2e/src/", "app.spec.js");
            Chai.expect(exists).to.be.equal(false);
        }));
        it("can fail with no unit tests", () => __awaiter(this, void 0, void 0, function* () {
            const stub = sandbox.stub(fileSystemMock, "fileReadText");
            stub.callsFake((directoryName, fileName) => __awaiter(this, void 0, void 0, function* () {
                if (fileName.endsWith("spec.js")
                    && directoryName.indexOf("unit") >= 0) {
                    return Promise.reject("error");
                }
                else {
                    return new fileSystem_mock_1.FileSystemMock().fileReadText(directoryName, fileName);
                }
            }));
            const obj = new TestSharedAppFramework();
            const res = yield obj.finalise(loggerStub, fileSystemMock, uniteConfigurationStub, engineVariablesStub, true);
            Chai.expect(res).to.be.equal(1);
            let exists = yield fileSystemMock.fileExists("./test/unit/temp/www/test/e2e/src/", "app.spec.js");
            Chai.expect(exists).to.be.equal(true);
            exists = yield fileSystemMock.fileExists("./test/unit/temp/www/test/unit/src/", "app.spec.js");
            Chai.expect(exists).to.be.equal(false);
        }));
        it("can fail with no css", () => __awaiter(this, void 0, void 0, function* () {
            const stub = sandbox.stub(fileSystemMock, "fileReadText");
            stub.callsFake((directoryName, fileName) => __awaiter(this, void 0, void 0, function* () {
                if (fileName.indexOf("reset") >= 0) {
                    return Promise.reject("error");
                }
                else {
                    return new fileSystem_mock_1.FileSystemMock().fileReadText(directoryName, fileName);
                }
            }));
            const obj = new TestSharedAppFramework();
            const res = yield obj.finalise(loggerStub, fileSystemMock, uniteConfigurationStub, engineVariablesStub, true);
            Chai.expect(res).to.be.equal(1);
            let exists = yield fileSystemMock.fileExists("./test/unit/temp/www/test/unit/src/", "app.spec.js");
            Chai.expect(exists).to.be.equal(true);
            exists = yield fileSystemMock.fileExists("./test/unit/temp/www/cssSrc/", "reset.css");
            Chai.expect(exists).to.be.equal(false);
        }));
        it("can succeed with no unit test runner", () => __awaiter(this, void 0, void 0, function* () {
            const obj = new TestSharedAppFramework();
            uniteConfigurationStub.unitTestRunner = "None";
            const res = yield obj.finalise(loggerStub, fileSystemMock, uniteConfigurationStub, engineVariablesStub, true);
            Chai.expect(res).to.be.equal(0);
            const exists = yield fileSystemMock.fileExists("./test/unit/temp/www/test/unit/src/", "app.spec.js");
            Chai.expect(exists).to.be.equal(false);
        }));
        it("can succeed with no e2e test runner", () => __awaiter(this, void 0, void 0, function* () {
            const obj = new TestSharedAppFramework();
            uniteConfigurationStub.e2eTestRunner = "None";
            const res = yield obj.finalise(loggerStub, fileSystemMock, uniteConfigurationStub, engineVariablesStub, true);
            Chai.expect(res).to.be.equal(0);
            const exists = yield fileSystemMock.fileExists("./test/unit/temp/www/test/e2e/src/", "app.spec.js");
            Chai.expect(exists).to.be.equal(false);
        }));
        it("can succeed with custom unit tests", () => __awaiter(this, void 0, void 0, function* () {
            const obj = new TestSharedAppFramework();
            obj.appModuleName = "app.module";
            obj.htmlFiles = [];
            obj.appCssFiles = [];
            obj.customUnitTests = true;
            uniteConfigurationStub.applicationFramework = "Angular";
            const res = yield obj.finalise(loggerStub, fileSystemMock, uniteConfigurationStub, engineVariablesStub, true);
            Chai.expect(res).to.be.equal(0);
            const exists = yield fileSystemMock.fileExists("./test/unit/temp/www/src/", "app.module.js");
            Chai.expect(exists).to.be.equal(true);
        }));
        it("can succeed", () => __awaiter(this, void 0, void 0, function* () {
            const obj = new TestSharedAppFramework();
            const res = yield obj.finalise(loggerStub, fileSystemMock, uniteConfigurationStub, engineVariablesStub, true);
            Chai.expect(res).to.be.equal(0);
            const exists = yield fileSystemMock.fileExists("./test/unit/temp/www/cssSrc/", "reset.css");
            Chai.expect(exists).to.be.equal(true);
        }));
    });
    describe("createLoaderReplacement", () => {
        it("can be called without include requires", () => __awaiter(this, void 0, void 0, function* () {
            const obj = new TestSharedAppFramework();
            obj.testCreateLoaderReplacement(engineVariablesStub, "EXTENSION", "LOADER", false);
            Chai.expect(engineVariablesStub.buildTranspileInclude.length).to.be.equal(0);
            Chai.expect(engineVariablesStub.buildTranspilePreBuild[0]).to.be.equal(`        .pipe(replace(/import(.*?)("|'|\`)(.*?).EXTENSION\\2/g, "import$1$2LOADER!$3.EXTENSION$2"))`);
        }));
        it("can be called with include requires", () => __awaiter(this, void 0, void 0, function* () {
            const obj = new TestSharedAppFramework();
            obj.testCreateLoaderReplacement(engineVariablesStub, "EXTENSION", "LOADER", true);
            Chai.expect(engineVariablesStub.buildTranspileInclude[0]).to.be.equal("const replace = require(\"gulp-replace\");");
            Chai.expect(engineVariablesStub.buildTranspilePreBuild[0]).to.be.equal(`        .pipe(replace(/import(.*?)("|'|\`)(.*?).EXTENSION\\2/g, "import$1$2LOADER!$3.EXTENSION$2"))`);
        }));
    });
    describe("createLoaderTypeMapReplacement", () => {
        it("can be called", () => __awaiter(this, void 0, void 0, function* () {
            const obj = new TestSharedAppFramework();
            obj.testCreateLoaderTypeMapReplacement(engineVariablesStub, "EXTENSION", "LOADER");
            Chai.expect(engineVariablesStub.buildTranspileInclude[0]).to.be.equal("const replace = require(\"gulp-replace\");");
            Chai.expect(engineVariablesStub.buildTranspileInclude[1]).to.be.equal("const clientPackages = require(\"./util/client-packages\");");
            Chai.expect(engineVariablesStub.buildTranspilePreBuild[0]).to.be.equal(`        .pipe(replace(/import(.*?)("|'|\`)(.*?).EXTENSION\\2/g, \`import$1$2\${clientPackages.getTypeMap(uniteConfig, "LOADER", buildConfiguration.minify)}!$3.EXTENSION$2\`))`);
        }));
    });
    describe("insertContent", () => {
        it("can be called when files does not exist", () => __awaiter(this, void 0, void 0, function* () {
            const obj = new TestSharedAppFramework();
            const res = yield obj.testInsertContent(loggerStub, fileSystemMock, engineVariablesStub, "myfile.txt", (content) => content);
            Chai.expect(res).to.be.equal(0);
        }));
        it("can be called when replacement throws an error", () => __awaiter(this, void 0, void 0, function* () {
            const obj = new TestSharedAppFramework();
            sandbox.stub(fileSystemMock, "fileExists").resolves(true);
            const res = yield obj.testInsertContent(loggerStub, fileSystemMock, engineVariablesStub, "myfile.txt", (content) => {
                throw new Error("err");
            });
            Chai.expect(res).to.be.equal(1);
            Chai.expect(loggerErrorSpy.args[0][0]).to.contain("Unable to replace");
        }));
        it("can be called and replace content", () => __awaiter(this, void 0, void 0, function* () {
            const obj = new TestSharedAppFramework();
            let written = "";
            sandbox.stub(fileSystemMock, "fileExists").resolves(true);
            sandbox.stub(fileSystemMock, "fileReadText").resolves("content");
            sandbox.stub(fileSystemMock, "fileWriteText").callsFake((folder, file, content) => {
                written = content;
            });
            const res = yield obj.testInsertContent(loggerStub, fileSystemMock, engineVariablesStub, "myfile.txt", (content) => "blah");
            Chai.expect(res).to.be.equal(0);
            Chai.expect(written).to.contain("blah");
        }));
    });
    describe("insertReplaceImports", () => {
        it("can be called with no items", () => __awaiter(this, void 0, void 0, function* () {
            const obj = new TestSharedAppFramework();
            const { content, remaining } = obj.testInsertReplaceImports("content", []);
            Chai.expect(content).to.be.equal("content");
            Chai.expect(remaining).to.be.deep.equal([]);
        }));
        it("can be called with items but no insert point", () => __awaiter(this, void 0, void 0, function* () {
            const obj = new TestSharedAppFramework();
            const { content, remaining } = obj.testInsertReplaceImports("content", ["import blah;"]);
            Chai.expect(content).to.be.equal("content");
            Chai.expect(remaining).to.be.deep.equal(["import blah;"]);
        }));
        it("can be called with items and an insert point", () => __awaiter(this, void 0, void 0, function* () {
            const obj = new TestSharedAppFramework();
            const { content, remaining } = obj.testInsertReplaceImports("import 1;", ["import blah;"]);
            Chai.expect(content).to.be.equal("import 1;\nimport blah;");
            Chai.expect(remaining).to.be.deep.equal([]);
        }));
        it("can be called with multiple items and an insert point", () => __awaiter(this, void 0, void 0, function* () {
            const obj = new TestSharedAppFramework();
            const { content, remaining } = obj.testInsertReplaceImports("import 1;\nimport 2;", ["import blah;", "import foo;"]);
            Chai.expect(content).to.be.equal("import 1;\nimport 2;\nimport blah;\nimport foo;");
            Chai.expect(remaining).to.be.deep.equal([]);
        }));
        it("can be called with multiple items and an insert point, but some existing", () => __awaiter(this, void 0, void 0, function* () {
            const obj = new TestSharedAppFramework();
            const { content, remaining } = obj.testInsertReplaceImports("import 1;\nimport 2;\nimport foo;", ["import blah;", "import foo;"]);
            Chai.expect(content).to.be.equal("import 1;\nimport 2;\nimport foo;\nimport blah;");
            Chai.expect(remaining).to.be.deep.equal([]);
        }));
        it("can be called with multiple items and an insert point, but all existing", () => __awaiter(this, void 0, void 0, function* () {
            const obj = new TestSharedAppFramework();
            const { content, remaining } = obj.testInsertReplaceImports("import 1;\nimport 2;\nimport foo;\nimport blah;", ["import blah;", "import foo;"]);
            Chai.expect(content).to.be.equal("import 1;\nimport 2;\nimport foo;\nimport blah;");
            Chai.expect(remaining).to.be.deep.equal([]);
        }));
    });
    describe("insertCompletion", () => {
        it("can be called with no items", () => __awaiter(this, void 0, void 0, function* () {
            const obj = new TestSharedAppFramework();
            obj.testInsertCompletion(loggerStub, undefined, undefined);
            Chai.expect(loggerWarningSpy.args.length).to.be.equal(0);
            Chai.expect(loggerBannerSpy.args.length).to.be.equal(0);
        }));
        it("can be called with remaining items", () => __awaiter(this, void 0, void 0, function* () {
            const obj = new TestSharedAppFramework();
            obj.testInsertCompletion(loggerStub, {
                remain1: ["foo", "bar"],
                remain2: ["bob", "bill"]
            }, undefined);
            Chai.expect(loggerWarningSpy.args.length).to.be.equal(2);
            Chai.expect(loggerBannerSpy.args.length).to.be.equal(14);
        }));
        it("can be called with remaining items keys but no entries", () => __awaiter(this, void 0, void 0, function* () {
            const obj = new TestSharedAppFramework();
            obj.testInsertCompletion(loggerStub, {
                remain1: ["foo", "bar"],
                remain2: []
            }, undefined);
            Chai.expect(loggerWarningSpy.args.length).to.be.equal(2);
            Chai.expect(loggerBannerSpy.args.length).to.be.equal(9);
        }));
        it("can be called with routes", () => __awaiter(this, void 0, void 0, function* () {
            const obj = new TestSharedAppFramework();
            obj.testInsertCompletion(loggerStub, undefined, ["foo", "bar"]);
            Chai.expect(loggerWarningSpy.args.length).to.be.equal(0);
            Chai.expect(loggerBannerSpy.args.length).to.be.equal(5);
        }));
    });
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,
