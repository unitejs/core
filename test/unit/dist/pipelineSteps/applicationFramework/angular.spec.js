"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Tests for Angular.
 */
const Chai = require("chai");
const Sinon = require("sinon");
const uniteConfiguration_1 = require("../../../../../dist/configuration/models/unite/uniteConfiguration");
const engineVariables_1 = require("../../../../../dist/engine/engineVariables");
const angular_1 = require("../../../../../dist/pipelineSteps/applicationFramework/angular");
const fileSystem_mock_1 = require("../../fileSystem.mock");
describe("Angular", () => {
    let sandbox;
    let loggerStub;
    let loggerErrorSpy;
    let loggerBannerSpy;
    let fileSystemMock;
    let uniteConfigurationStub;
    let engineVariablesStub;
    beforeEach(() => {
        sandbox = Sinon.createSandbox();
        loggerStub = {};
        loggerStub.info = () => { };
        loggerStub.error = () => { };
        loggerStub.banner = () => { };
        loggerStub.warning = () => { };
        loggerErrorSpy = sandbox.spy(loggerStub, "error");
        loggerBannerSpy = sandbox.spy(loggerStub, "banner");
        fileSystemMock = new fileSystem_mock_1.FileSystemMock();
        uniteConfigurationStub = new uniteConfiguration_1.UniteConfiguration();
        uniteConfigurationStub.applicationFramework = "Angular";
        uniteConfigurationStub.moduleType = "AMD";
        uniteConfigurationStub.bundler = "Webpack";
        uniteConfigurationStub.unitTestRunner = "Karma";
        uniteConfigurationStub.unitTestFramework = "Jasmine";
        uniteConfigurationStub.e2eTestRunner = "Protractor";
        uniteConfigurationStub.e2eTestFramework = "Jasmine";
        uniteConfigurationStub.sourceLanguage = "JavaScript";
        uniteConfigurationStub.linter = "ESLint";
        uniteConfigurationStub.cssPre = "Css";
        uniteConfigurationStub.cssPost = "None";
        uniteConfigurationStub.taskManager = "Gulp";
        uniteConfigurationStub.clientPackages = {};
        uniteConfigurationStub.sourceExtensions = ["js"];
        uniteConfigurationStub.viewExtensions = [];
        uniteConfigurationStub.styleExtension = "css";
        engineVariablesStub = new engineVariables_1.EngineVariables();
        engineVariablesStub.engineAssetsFolder = "./assets/";
        engineVariablesStub.setupDirectories(fileSystemMock, "./test/unit/temp");
        engineVariablesStub.findDependencyVersion = sandbox.stub().returns("1.2.3");
    });
    afterEach(() => __awaiter(this, void 0, void 0, function* () {
        sandbox.restore();
        yield fileSystemMock.directoryDelete("./test/unit/temp");
    }));
    it("can be created", () => {
        const obj = new angular_1.Angular();
        Chai.should().exist(obj);
    });
    describe("mainCondition", () => {
        it("can be called with not matching condition", () => __awaiter(this, void 0, void 0, function* () {
            const obj = new angular_1.Angular();
            uniteConfigurationStub.applicationFramework = undefined;
            const res = obj.mainCondition(uniteConfigurationStub, engineVariablesStub);
            Chai.expect(res).to.be.equal(false);
        }));
        it("can be called with matching condition", () => __awaiter(this, void 0, void 0, function* () {
            const obj = new angular_1.Angular();
            const res = obj.mainCondition(uniteConfigurationStub, engineVariablesStub);
            Chai.expect(res).to.be.equal(true);
        }));
    });
    describe("initialise", () => {
        it("can be called with false main condition", () => __awaiter(this, void 0, void 0, function* () {
            const obj = new angular_1.Angular();
            const res = yield obj.initialise(loggerStub, fileSystemMock, uniteConfigurationStub, engineVariablesStub, false);
            Chai.expect(res).to.be.equal(0);
        }));
        it("can be called with application framework not matching", () => __awaiter(this, void 0, void 0, function* () {
            const obj = new angular_1.Angular();
            uniteConfigurationStub.applicationFramework = "Vanilla";
            const res = yield obj.initialise(loggerStub, fileSystemMock, uniteConfigurationStub, engineVariablesStub, true);
            Chai.expect(res).to.be.equal(0);
        }));
        it("can be called with application framework matching but failing bundler", () => __awaiter(this, void 0, void 0, function* () {
            const obj = new angular_1.Angular();
            uniteConfigurationStub.bundler = "RequireJS";
            const res = yield obj.initialise(loggerStub, fileSystemMock, uniteConfigurationStub, engineVariablesStub, true);
            Chai.expect(res).to.be.equal(1);
            Chai.expect(loggerErrorSpy.args[0][0]).to.contain("not currently support");
            Chai.expect(uniteConfigurationStub.viewExtensions.length).to.be.equal(0);
        }));
        it("can be called with application framework matching and working bundler", () => __awaiter(this, void 0, void 0, function* () {
            const obj = new angular_1.Angular();
            const res = yield obj.initialise(loggerStub, fileSystemMock, uniteConfigurationStub, engineVariablesStub, true);
            Chai.expect(res).to.be.equal(0);
            Chai.expect(uniteConfigurationStub.viewExtensions.length).to.be.equal(1);
        }));
    });
    describe("configure", () => {
        it("can be called with javascript", () => __awaiter(this, void 0, void 0, function* () {
            engineVariablesStub.setConfiguration("Babel", { plugins: [] });
            engineVariablesStub.setConfiguration("ESLint", { parser: "espree" });
            engineVariablesStub.setConfiguration("Protractor", { plugins: [{ path: "aaa" }] });
            engineVariablesStub.setConfiguration("WebdriverIO.Plugins", []);
            engineVariablesStub.setConfiguration("JavaScript", { compilerOptions: {} });
            const obj = new angular_1.Angular();
            const res = yield obj.configure(loggerStub, fileSystemMock, uniteConfigurationStub, engineVariablesStub, true);
            Chai.expect(res).to.be.equal(0);
            Chai.expect(engineVariablesStub.buildTranspileInclude.length).to.be.equal(2);
            Chai.expect(engineVariablesStub.buildTranspilePreBuild.length).to.be.equal(7);
            Chai.expect(engineVariablesStub.getConfiguration("Protractor").plugins.length).to.be.equal(2);
            Chai.expect(engineVariablesStub.getConfiguration("WebdriverIO.Plugins").length).to.be.equal(1);
            Chai.expect(engineVariablesStub.getConfiguration("Babel").plugins.length).to.be.equal(2);
            Chai.expect(engineVariablesStub.getConfiguration("ESLint").parser).to.be.equal("babel-eslint");
            Chai.expect(engineVariablesStub.getConfiguration("TypeScript")).to.be.equal(undefined);
            const packageJsonDependencies = {};
            engineVariablesStub.buildDependencies(uniteConfigurationStub, packageJsonDependencies);
            Chai.expect(uniteConfigurationStub.clientPackages["zone.js"].testingAdditions["runner-patch"]).to.be.equal("dist/jasmine-patch.js");
        }));
        it("can be called with typescript", () => __awaiter(this, void 0, void 0, function* () {
            engineVariablesStub.setConfiguration("TypeScript", { compilerOptions: {} });
            engineVariablesStub.setConfiguration("TSLint", { rules: {} });
            uniteConfigurationStub.sourceLanguage = "TypeScript";
            uniteConfigurationStub.sourceExtensions = ["ts"];
            const obj = new angular_1.Angular();
            const res = yield obj.configure(loggerStub, fileSystemMock, uniteConfigurationStub, engineVariablesStub, true);
            Chai.expect(res).to.be.equal(0);
            Chai.expect(engineVariablesStub.buildTranspileInclude.length).to.be.equal(2);
            Chai.expect(engineVariablesStub.buildTranspilePreBuild.length).to.be.equal(7);
            Chai.expect(engineVariablesStub.getConfiguration("Babel")).to.be.equal(undefined);
            Chai.expect(engineVariablesStub.getConfiguration("ESLint")).to.be.equal(undefined);
            Chai.expect(engineVariablesStub.getConfiguration("TSLint").rules["no-empty"]).to.not.be.equal(undefined);
            Chai.expect(engineVariablesStub.getConfiguration("TypeScript").compilerOptions.experimentalDecorators).to.be.equal(true);
            const packageJsonDependencies = {};
            engineVariablesStub.buildDependencies(uniteConfigurationStub, packageJsonDependencies);
            Chai.expect(uniteConfigurationStub.clientPackages["zone.js"].testingAdditions["runner-patch"]).to.be.equal("dist/jasmine-patch.js");
        }));
        it("can be called with mocha framework", () => __awaiter(this, void 0, void 0, function* () {
            uniteConfigurationStub.unitTestFramework = "MochaChai";
            const obj = new angular_1.Angular();
            const res = yield obj.configure(loggerStub, fileSystemMock, uniteConfigurationStub, engineVariablesStub, true);
            Chai.expect(res).to.be.equal(0);
            const packageJsonDependencies = {};
            engineVariablesStub.buildDependencies(uniteConfigurationStub, packageJsonDependencies);
            Chai.expect(uniteConfigurationStub.clientPackages["zone.js"].testingAdditions["runner-patch"]).to.be.equal("dist/mocha-patch.js");
        }));
        it("can be called with not gulp", () => __awaiter(this, void 0, void 0, function* () {
            uniteConfigurationStub.taskManager = undefined;
            const obj = new angular_1.Angular();
            const res = yield obj.configure(loggerStub, fileSystemMock, uniteConfigurationStub, engineVariablesStub, true);
            Chai.expect(res).to.be.equal(0);
            Chai.expect(engineVariablesStub.buildTranspileInclude.length).to.be.equal(0);
            Chai.expect(engineVariablesStub.buildTranspilePreBuild.length).to.be.equal(0);
        }));
        it("can be called no configurations with false mainCondition", () => __awaiter(this, void 0, void 0, function* () {
            const obj = new angular_1.Angular();
            const res = yield obj.configure(loggerStub, fileSystemMock, uniteConfigurationStub, engineVariablesStub, false);
            Chai.expect(res).to.be.equal(0);
        }));
        it("can be called with configurations with false mainCondition", () => __awaiter(this, void 0, void 0, function* () {
            engineVariablesStub.setConfiguration("Babel", { plugins: ["transform-decorators-legacy"] });
            engineVariablesStub.setConfiguration("ESLint", { parser: "babel-eslint" });
            engineVariablesStub.setConfiguration("TypeScript", { compilerOptions: {} });
            engineVariablesStub.setConfiguration("Protractor", { plugins: [{ path: "./node_modules/unitejs-protractor-plugin" }] });
            engineVariablesStub.setConfiguration("WebdriverIO.Plugins", ["unitejs-webdriver-plugin"]);
            const obj = new angular_1.Angular();
            const res = yield obj.configure(loggerStub, fileSystemMock, uniteConfigurationStub, engineVariablesStub, false);
            Chai.expect(res).to.be.equal(0);
            Chai.expect(engineVariablesStub.getConfiguration("Protractor").plugins.length).to.be.equal(0);
            Chai.expect(engineVariablesStub.getConfiguration("WebdriverIO.Plugins").length).to.be.equal(0);
            Chai.expect(engineVariablesStub.getConfiguration("Babel").plugins.length).to.be.equal(0);
            Chai.expect(engineVariablesStub.getConfiguration("ESLint").parser).to.be.equal(undefined);
            Chai.expect(engineVariablesStub.getConfiguration("TypeScript").compilerOptions.experimentalDecorators).to.be.equal(undefined);
        }));
    });
    describe("finalise", () => {
        it("can fail with no source", () => __awaiter(this, void 0, void 0, function* () {
            const stub = sandbox.stub(fileSystemMock, "fileReadText");
            stub.callsFake((directoryName, fileName) => __awaiter(this, void 0, void 0, function* () {
                if (fileName.endsWith("js")) {
                    return Promise.reject("error");
                }
                else {
                    return new fileSystem_mock_1.FileSystemMock().fileReadText(directoryName, fileName);
                }
            }));
            const obj = new angular_1.Angular();
            const res = yield obj.finalise(loggerStub, fileSystemMock, uniteConfigurationStub, engineVariablesStub, true);
            Chai.expect(res).to.be.equal(1);
            const exists = yield fileSystemMock.fileExists("./test/unit/temp/www/src/", "app.module.js");
            Chai.expect(exists).to.be.equal(false);
        }));
        it("can fail with no e2e tests", () => __awaiter(this, void 0, void 0, function* () {
            const stub = sandbox.stub(fileSystemMock, "fileReadText");
            stub.callsFake((directoryName, fileName) => __awaiter(this, void 0, void 0, function* () {
                if (fileName.endsWith("spec.js")) {
                    return Promise.reject("error");
                }
                else {
                    return new fileSystem_mock_1.FileSystemMock().fileReadText(directoryName, fileName);
                }
            }));
            const obj = new angular_1.Angular();
            const res = yield obj.finalise(loggerStub, fileSystemMock, uniteConfigurationStub, engineVariablesStub, true);
            Chai.expect(res).to.be.equal(1);
            let exists = yield fileSystemMock.fileExists("./test/unit/temp/www/src/", "app.module.js");
            Chai.expect(exists).to.be.equal(true);
            exists = yield fileSystemMock.fileExists("./test/unit/temp/www/test/e2e/src/", "app.spec.js");
            Chai.expect(exists).to.be.equal(false);
        }));
        it("can fail with no html", () => __awaiter(this, void 0, void 0, function* () {
            const stub = sandbox.stub(fileSystemMock, "fileReadText");
            stub.callsFake((directoryName, fileName) => __awaiter(this, void 0, void 0, function* () {
                if (fileName.endsWith("html")) {
                    return Promise.reject("error");
                }
                else {
                    return new fileSystem_mock_1.FileSystemMock().fileReadText(directoryName, fileName);
                }
            }));
            const obj = new angular_1.Angular();
            const res = yield obj.finalise(loggerStub, fileSystemMock, uniteConfigurationStub, engineVariablesStub, true);
            Chai.expect(res).to.be.equal(1);
            let exists = yield fileSystemMock.fileExists("./test/unit/temp/www/src/", "app.module.js");
            Chai.expect(exists).to.be.equal(true);
            exists = yield fileSystemMock.fileExists("./test/unit/temp/www/src/", "app.component.html");
            Chai.expect(exists).to.be.equal(false);
        }));
        it("can fail with no css", () => __awaiter(this, void 0, void 0, function* () {
            const stub = sandbox.stub(fileSystemMock, "fileReadText");
            stub.callsFake((directoryName, fileName) => __awaiter(this, void 0, void 0, function* () {
                if (fileName.endsWith("css")) {
                    return Promise.reject("error");
                }
                else {
                    return new fileSystem_mock_1.FileSystemMock().fileReadText(directoryName, fileName);
                }
            }));
            const obj = new angular_1.Angular();
            const res = yield obj.finalise(loggerStub, fileSystemMock, uniteConfigurationStub, engineVariablesStub, true);
            Chai.expect(res).to.be.equal(1);
            let exists = yield fileSystemMock.fileExists("./test/unit/temp/www/src/", "app.module.js");
            Chai.expect(exists).to.be.equal(true);
            exists = yield fileSystemMock.fileExists("./test/unit/temp/www/src/", "app.component.css");
            Chai.expect(exists).to.be.equal(false);
        }));
        it("can fail with no shared unit tests", () => __awaiter(this, void 0, void 0, function* () {
            const stub = sandbox.stub(fileSystemMock, "fileReadText");
            stub.callsFake((directoryName, fileName) => __awaiter(this, void 0, void 0, function* () {
                if (fileName.endsWith("spec.js")
                    && directoryName.indexOf("unit") >= 0) {
                    return Promise.reject("error");
                }
                else {
                    return new fileSystem_mock_1.FileSystemMock().fileReadText(directoryName, fileName);
                }
            }));
            const obj = new angular_1.Angular();
            const res = yield obj.finalise(loggerStub, fileSystemMock, uniteConfigurationStub, engineVariablesStub, true);
            Chai.expect(res).to.be.equal(1);
            let exists = yield fileSystemMock.fileExists("./test/unit/temp/www/test/e2e/src/", "app.spec.js");
            Chai.expect(exists).to.be.equal(true);
            exists = yield fileSystemMock.fileExists("./test/unit/temp/www/test/unit/src/", "bootstrapper.spec.js");
            Chai.expect(exists).to.be.equal(false);
        }));
        it("can fail with no custom unit tests", () => __awaiter(this, void 0, void 0, function* () {
            const stub = sandbox.stub(fileSystemMock, "fileReadText");
            stub.callsFake((directoryName, fileName) => __awaiter(this, void 0, void 0, function* () {
                if (fileName.endsWith("app.module.spec.js")
                    && directoryName.indexOf("unit") >= 0) {
                    return Promise.reject("error");
                }
                else {
                    return new fileSystem_mock_1.FileSystemMock().fileReadText(directoryName, fileName);
                }
            }));
            const obj = new angular_1.Angular();
            const res = yield obj.finalise(loggerStub, fileSystemMock, uniteConfigurationStub, engineVariablesStub, true);
            Chai.expect(res).to.be.equal(1);
            let exists = yield fileSystemMock.fileExists("./test/unit/temp/www/test/unit/src/", "bootstrapper.spec.js");
            Chai.expect(exists).to.be.equal(true);
            exists = yield fileSystemMock.fileExists("./test/unit/temp/www/test/unit/src/", "app.module.spec.js");
            Chai.expect(exists).to.be.equal(false);
        }));
        it("can complete successfully with false main condition", () => __awaiter(this, void 0, void 0, function* () {
            const obj = new angular_1.Angular();
            const res = yield obj.finalise(loggerStub, fileSystemMock, uniteConfigurationStub, engineVariablesStub, false);
            Chai.expect(res).to.be.equal(0);
        }));
        it("can complete successfully with javascript", () => __awaiter(this, void 0, void 0, function* () {
            const obj = new angular_1.Angular();
            const res = yield obj.finalise(loggerStub, fileSystemMock, uniteConfigurationStub, engineVariablesStub, true);
            Chai.expect(res).to.be.equal(0);
            const exists = yield fileSystemMock.fileExists("./test/unit/temp/www/test/unit/src/", "bootstrapper.spec.js");
            Chai.expect(exists).to.be.equal(true);
        }));
        it("can complete successfully with typescript", () => __awaiter(this, void 0, void 0, function* () {
            uniteConfigurationStub.sourceLanguage = "TypeScript";
            const obj = new angular_1.Angular();
            const res = yield obj.finalise(loggerStub, fileSystemMock, uniteConfigurationStub, engineVariablesStub, true);
            Chai.expect(res).to.be.equal(0);
            const exists = yield fileSystemMock.fileExists("./test/unit/temp/www/test/unit/src/", "bootstrapper.spec.ts");
            Chai.expect(exists).to.be.equal(true);
        }));
    });
    describe("insertRoutes", () => {
        it("can be called with no routes", () => __awaiter(this, void 0, void 0, function* () {
            const obj = new angular_1.Angular();
            const res = yield obj.insertRoutes(loggerStub, fileSystemMock, uniteConfigurationStub, engineVariablesStub, undefined);
            Chai.expect(res).to.be.equal(0);
        }));
        it("can fail if unable to read files", () => __awaiter(this, void 0, void 0, function* () {
            const obj = new angular_1.Angular();
            yield obj.finalise(loggerStub, fileSystemMock, uniteConfigurationStub, engineVariablesStub, true);
            sandbox.stub(fileSystemMock, "fileReadText").throws(new Error("err"));
            const res = yield obj.insertRoutes(loggerStub, fileSystemMock, uniteConfigurationStub, engineVariablesStub, {
                "my/route": {
                    modulePath: "./examples/my-route",
                    moduleType: "MyRoute"
                }
            });
            Chai.expect(res).to.be.equal(1);
            Chai.expect(loggerErrorSpy.args[0][0]).to.contain("Unable");
        }));
        it("can be called with routes as javascript", () => __awaiter(this, void 0, void 0, function* () {
            const obj = new angular_1.Angular();
            yield obj.finalise(loggerStub, fileSystemMock, uniteConfigurationStub, engineVariablesStub, true);
            let writtenApp;
            let writtenHtml;
            sandbox.stub(fileSystemMock, "fileWriteText").callsFake((folder, file, content) => {
                if (!writtenApp) {
                    writtenApp = content;
                }
                else {
                    writtenHtml = content;
                }
            });
            const res = yield obj.insertRoutes(loggerStub, fileSystemMock, uniteConfigurationStub, engineVariablesStub, {
                "my/route": {
                    modulePath: "./examples/my-route",
                    moduleType: "MyRoute"
                },
                "their/root": {
                    modulePath: "./their/root",
                    moduleType: "TheirRoot"
                }
            });
            Chai.expect(res).to.be.equal(0);
            Chai.expect(writtenApp).to.contain(`import {MyRoute} from "./examples/my-route";`);
            Chai.expect(writtenApp).to.contain(`import {TheirRoot} from "./their/root";`);
            Chai.expect(writtenApp).to.contain(`{path: "my/route", component: MyRoute}`);
            Chai.expect(writtenApp).to.contain(`{path: "their/root", component: TheirRoot}`);
            Chai.expect(writtenHtml).to.contain(`<a routerLink="/my/route">My Route</a>`);
            Chai.expect(writtenHtml).to.contain(`<a routerLink="/their/root">Their Root</a>`);
        }));
        it("can be called with routes as typescript", () => __awaiter(this, void 0, void 0, function* () {
            uniteConfigurationStub.sourceLanguage = "TypeScript";
            const obj = new angular_1.Angular();
            yield obj.finalise(loggerStub, fileSystemMock, uniteConfigurationStub, engineVariablesStub, true);
            let writtenApp;
            let writtenHtml;
            sandbox.stub(fileSystemMock, "fileWriteText").callsFake((folder, file, content) => {
                if (!writtenApp) {
                    writtenApp = content;
                }
                else {
                    writtenHtml = content;
                }
            });
            const res = yield obj.insertRoutes(loggerStub, fileSystemMock, uniteConfigurationStub, engineVariablesStub, {
                "my/route": {
                    modulePath: "./examples/my-route",
                    moduleType: "MyRoute"
                },
                "their/root": {
                    modulePath: "./their/root",
                    moduleType: "TheirRoot"
                }
            });
            Chai.expect(res).to.be.equal(0);
            Chai.expect(writtenApp).to.contain(`import { MyRoute } from "./examples/my-route";`);
            Chai.expect(writtenApp).to.contain(`import { TheirRoot } from "./their/root";`);
            Chai.expect(writtenApp).to.contain(`{ path: "my/route", component: MyRoute }`);
            Chai.expect(writtenApp).to.contain(`{ path: "their/root", component: TheirRoot }`);
            Chai.expect(writtenHtml).to.contain(`<a routerLink="/my/route">My Route</a>`);
            Chai.expect(writtenHtml).to.contain(`<a routerLink="/their/root">Their Root</a>`);
        }));
        it("can be called with routes already existing", () => __awaiter(this, void 0, void 0, function* () {
            const obj = new angular_1.Angular();
            yield obj.finalise(loggerStub, fileSystemMock, uniteConfigurationStub, engineVariablesStub, true);
            const routes = {
                "my/route": {
                    modulePath: "./examples/my-route",
                    moduleType: "MyRoute"
                },
                "their/root": {
                    modulePath: "./their/root",
                    moduleType: "TheirRoot"
                }
            };
            let res = yield obj.insertRoutes(loggerStub, fileSystemMock, uniteConfigurationStub, engineVariablesStub, routes);
            Chai.expect(res).to.be.equal(0);
            res = yield obj.insertRoutes(loggerStub, fileSystemMock, uniteConfigurationStub, engineVariablesStub, routes);
            Chai.expect(res).to.be.equal(0);
            const appContent = yield fileSystemMock.fileReadText("./test/unit/temp/www/src/", "app.module.js");
            Chai.expect(/import {MyRoute} from "\.\/examples\/my-route\";/g.exec(appContent).length).to.be.equal(1);
            Chai.expect(/import {TheirRoot} from "\.\/their\/root\";/g.exec(appContent).length).to.be.equal(1);
            Chai.expect(/{path: \"my\/route\", component: MyRoute}/g.exec(appContent).length).to.be.equal(1);
            Chai.expect(/{path: \"their\/root\", component: TheirRoot}/g.exec(appContent).length).to.be.equal(1);
            const viewContent = yield fileSystemMock.fileReadText("./test/unit/temp/www/src/", "app.component.html");
            Chai.expect(/<a routerLink=\"\/my\/route\">My Route<\/a>/g.exec(viewContent).length).to.be.equal(1);
            Chai.expect(/<a routerLink=\"\/their\/root\">Their Root<\/a>/g.exec(viewContent).length).to.be.equal(1);
        }));
        it("can be called when unable to find insertion points", () => __awaiter(this, void 0, void 0, function* () {
            const obj = new angular_1.Angular();
            yield obj.finalise(loggerStub, fileSystemMock, uniteConfigurationStub, engineVariablesStub, true);
            sandbox.stub(fileSystemMock, "fileReadText").resolves("");
            const res = yield obj.insertRoutes(loggerStub, fileSystemMock, uniteConfigurationStub, engineVariablesStub, {
                "my/route": {
                    modulePath: "./examples/my-route",
                    moduleType: "MyRoute"
                },
                "their/root": {
                    modulePath: "./their/root",
                    moduleType: "TheirRoot"
                }
            });
            Chai.expect(res).to.be.equal(0);
            const banner = loggerBannerSpy.args.join();
            Chai.expect(banner).to.contain(`import {MyRoute} from "./examples/my-route";`);
            Chai.expect(banner).to.contain(`import {TheirRoot} from "./their/root";`);
            Chai.expect(banner).to.contain(`{path: "my/route", component: MyRoute}`);
            Chai.expect(banner).to.contain(`{path: "their/root", component: TheirRoot}`);
            Chai.expect(banner).to.contain(`<a routerLink="/my/route">My Route</a>`);
            Chai.expect(banner).to.contain(`<a routerLink="/their/root">Their Root</a>`);
        }));
    });
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,
