"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Tests for PackageUtils.
 */
const Chai = require("chai");
const child = require("child_process");
const Sinon = require("sinon");
const packageUtils_1 = require("../../../../dist/pipelineSteps/packageUtils");
describe("PackageUtils", () => {
    let sandbox;
    let loggerStub;
    let fileSystemStub;
    let loggerInfoSpy;
    let childSpawnStub;
    let childSpawnProcess;
    beforeEach(() => __awaiter(this, void 0, void 0, function* () {
        sandbox = Sinon.sandbox.create();
        loggerStub = {};
        loggerStub.info = () => { };
        loggerStub.error = () => { };
        fileSystemStub = {};
        childSpawnStub = sandbox.stub(child, "spawn");
        childSpawnProcess = {
            stdout: {},
            stderr: {}
        };
        childSpawnProcess.on = () => { };
        childSpawnProcess.stdout.on = () => { };
        childSpawnProcess.stderr.on = () => { };
        childSpawnStub.returns(childSpawnProcess);
        loggerInfoSpy = sandbox.spy(loggerStub, "info");
    }));
    afterEach(() => __awaiter(this, void 0, void 0, function* () {
        sandbox.restore();
    }));
    it("can be created", () => {
        const obj = new packageUtils_1.PackageUtils();
        Chai.should().exist(obj);
    });
    describe("exec", () => {
        it("can be called with no working directory", () => __awaiter(this, void 0, void 0, function* () {
            childSpawnProcess.on = (name, cb) => {
                if (name === "close") {
                    cb(0);
                }
            };
            const data = yield packageUtils_1.PackageUtils.exec(loggerStub, fileSystemStub, "package", undefined, undefined);
            const isWin = /^win/.test(process.platform);
            Chai.expect(childSpawnStub.args[0][0]).to.be.equal(`package${isWin ? ".cmd" : ""}`);
            Chai.expect(data).to.be.equal("");
        }));
        it("can be called with a working directory", () => __awaiter(this, void 0, void 0, function* () {
            fileSystemStub.pathAbsolute = () => "/someplace/foo";
            childSpawnProcess.on = (name, cb) => {
                if (name === "close") {
                    cb(0);
                }
            };
            const data = yield packageUtils_1.PackageUtils.exec(loggerStub, fileSystemStub, "package", "foo", undefined);
            Chai.expect(data).to.be.equal("");
            const isWin = /^win/.test(process.platform);
            Chai.expect(childSpawnStub.args[0][0]).to.be.equal(`package${isWin ? ".cmd" : ""}`);
            Chai.expect(childSpawnStub.args[0][2].cwd).to.be.equal("/someplace/foo");
        }));
        it("can be called with a working directory and args", () => __awaiter(this, void 0, void 0, function* () {
            fileSystemStub.pathAbsolute = () => "/someplace/foo";
            childSpawnProcess.on = (name, cb) => {
                if (name === "close") {
                    cb(0);
                }
            };
            const data = yield packageUtils_1.PackageUtils.exec(loggerStub, fileSystemStub, "package", "foo", ["arg1", "arg2"]);
            Chai.expect(data).to.be.equal("");
            const isWin = /^win/.test(process.platform);
            Chai.expect(childSpawnStub.args[0][0]).to.be.equal(`package${isWin ? ".cmd" : ""}`);
            Chai.expect(childSpawnStub.args[0][1]).to.contain("arg1");
            Chai.expect(childSpawnStub.args[0][1]).to.contain("arg2");
            Chai.expect(childSpawnStub.args[0][2].cwd).to.be.equal("/someplace/foo");
        }));
        it("can be called on non windows platform", () => __awaiter(this, void 0, void 0, function* () {
            childSpawnProcess.on = (name, cb) => {
                if (name === "close") {
                    cb(0);
                }
            };
            packageUtils_1.PackageUtils.isWindows = false;
            const data = yield packageUtils_1.PackageUtils.exec(loggerStub, fileSystemStub, "package", undefined, undefined);
            Chai.expect(childSpawnStub.args[0][0]).to.be.equal("package");
            Chai.expect(data).to.be.equal("");
        }));
        it("can be called on windows platform", () => __awaiter(this, void 0, void 0, function* () {
            childSpawnProcess.on = (name, cb) => {
                if (name === "close") {
                    cb(0);
                }
            };
            packageUtils_1.PackageUtils.isWindows = true;
            const data = yield packageUtils_1.PackageUtils.exec(loggerStub, fileSystemStub, "package", undefined, undefined);
            Chai.expect(childSpawnStub.args[0][0]).to.be.equal("package.cmd");
            Chai.expect(data).to.be.equal("");
        }));
        it("can be called and exit with code 1", () => __awaiter(this, void 0, void 0, function* () {
            childSpawnProcess.on = (name, cb) => {
                if (name === "close") {
                    cb(1);
                }
            };
            try {
                yield packageUtils_1.PackageUtils.exec(loggerStub, fileSystemStub, "package", undefined, undefined);
            }
            catch (err) {
                Chai.expect(err).to.be.equal(1);
            }
        }));
        it("can be called and return data", () => __awaiter(this, void 0, void 0, function* () {
            childSpawnProcess.on = (name, cb) => {
                if (name === "close") {
                    cb(0);
                }
            };
            childSpawnProcess.stdout.on = (name, cb) => {
                cb("this");
                cb("is");
                cb("data");
            };
            const data = yield packageUtils_1.PackageUtils.exec(loggerStub, fileSystemStub, "package", undefined, undefined);
            Chai.expect(data).to.be.equal("thisisdata");
            Chai.expect(loggerInfoSpy.args[0][0]).to.be.equal("this");
            Chai.expect(loggerInfoSpy.args[1][0]).to.be.equal("is");
            Chai.expect(loggerInfoSpy.args[2][0]).to.be.equal("data");
        }));
        it("can be called with undefined data", () => __awaiter(this, void 0, void 0, function* () {
            childSpawnProcess.on = (name, cb) => {
                if (name === "close") {
                    cb(0);
                }
            };
            childSpawnProcess.stdout.on = (name, cb) => {
                cb(undefined);
                cb("is");
                cb("data");
            };
            const data = yield packageUtils_1.PackageUtils.exec(loggerStub, fileSystemStub, "package", undefined, undefined);
            Chai.expect(data).to.be.equal("isdata");
            Chai.expect(loggerInfoSpy.args[0][0]).to.be.equal("");
            Chai.expect(loggerInfoSpy.args[1][0]).to.be.equal("is");
            Chai.expect(loggerInfoSpy.args[2][0]).to.be.equal("data");
        }));
        it("can be called and had error and other data", () => __awaiter(this, void 0, void 0, function* () {
            childSpawnProcess.on = (name, cb) => {
                if (name === "close") {
                    cb(0);
                }
            };
            childSpawnProcess.stderr.on = (name, cb) => {
                cb("this");
                cb("is");
                cb("error");
            };
            childSpawnProcess.stdout.on = (name, cb) => {
                cb("this");
                cb("is");
                cb("data");
            };
            const data = yield packageUtils_1.PackageUtils.exec(loggerStub, fileSystemStub, "package", undefined, undefined);
            Chai.expect(data).to.be.equal("thisisdata");
            Chai.expect(loggerInfoSpy.args[0][0]).to.be.equal("this");
            Chai.expect(loggerInfoSpy.args[1][0]).to.be.equal("is");
            Chai.expect(loggerInfoSpy.args[2][0]).to.be.equal("data");
            Chai.expect(loggerInfoSpy.args[3][0]).to.be.equal("this");
            Chai.expect(loggerInfoSpy.args[4][0]).to.be.equal("is");
            Chai.expect(loggerInfoSpy.args[5][0]).to.be.equal("error");
        }));
        it("can be called and had undefined error and other data", () => __awaiter(this, void 0, void 0, function* () {
            childSpawnProcess.on = (name, cb) => {
                if (name === "close") {
                    cb(0);
                }
            };
            childSpawnProcess.stderr.on = (name, cb) => {
                cb(undefined);
                cb("is");
                cb("error");
            };
            childSpawnProcess.stdout.on = (name, cb) => {
                cb("this");
                cb("is");
                cb("data");
            };
            const data = yield packageUtils_1.PackageUtils.exec(loggerStub, fileSystemStub, "package", undefined, undefined);
            Chai.expect(data).to.be.equal("thisisdata");
            Chai.expect(loggerInfoSpy.args[0][0]).to.be.equal("this");
            Chai.expect(loggerInfoSpy.args[1][0]).to.be.equal("is");
            Chai.expect(loggerInfoSpy.args[2][0]).to.be.equal("data");
            Chai.expect(loggerInfoSpy.args[3][0]).to.be.equal("");
            Chai.expect(loggerInfoSpy.args[4][0]).to.be.equal("is");
            Chai.expect(loggerInfoSpy.args[5][0]).to.be.equal("error");
        }));
        it("can fail with spawn error", () => __awaiter(this, void 0, void 0, function* () {
            childSpawnProcess.on = (name, cb) => {
                if (name === "error") {
                    cb("error");
                }
            };
            try {
                yield packageUtils_1.PackageUtils.exec(loggerStub, fileSystemStub, "package", undefined, undefined);
            }
            catch (err) {
                Chai.expect(err).to.contain("error");
            }
        }));
    });
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,
