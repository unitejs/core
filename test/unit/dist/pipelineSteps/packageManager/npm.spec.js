"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Tests for Npm.
 */
const Chai = require("chai");
const Sinon = require("sinon");
const uniteConfiguration_1 = require("../../../../../dist/configuration/models/unite/uniteConfiguration");
const engineVariables_1 = require("../../../../../dist/engine/engineVariables");
const npm_1 = require("../../../../../dist/pipelineSteps/packageManager/npm");
const packageUtils_1 = require("../../../../../dist/pipelineSteps/packageUtils");
const fileSystem_mock_1 = require("../../fileSystem.mock");
describe("Npm", () => {
    let sandbox;
    let loggerStub;
    let fileSystemMock;
    let uniteConfigurationStub;
    let engineVariablesStub;
    beforeEach(() => {
        sandbox = Sinon.sandbox.create();
        loggerStub = {};
        loggerStub.info = () => { };
        loggerStub.error = () => { };
        fileSystemMock = new fileSystem_mock_1.FileSystemMock();
        uniteConfigurationStub = new uniteConfiguration_1.UniteConfiguration();
        uniteConfigurationStub.packageManager = "Npm";
        engineVariablesStub = new engineVariables_1.EngineVariables();
        engineVariablesStub.setupDirectories(fileSystemMock, "./test/unit/temp");
    });
    afterEach(() => __awaiter(this, void 0, void 0, function* () {
        sandbox.restore();
        yield fileSystemMock.directoryDelete("./test/unit/temp");
    }));
    it("can be created", () => {
        const obj = new npm_1.Npm();
        Chai.should().exist(obj);
    });
    describe("mainCondition", () => {
        it("can be called with not matching condition", () => __awaiter(this, void 0, void 0, function* () {
            const obj = new npm_1.Npm();
            uniteConfigurationStub.packageManager = undefined;
            const res = obj.mainCondition(uniteConfigurationStub, engineVariablesStub);
            Chai.expect(res).to.be.equal(false);
        }));
        it("can be called with matching condition", () => __awaiter(this, void 0, void 0, function* () {
            const obj = new npm_1.Npm();
            const res = obj.mainCondition(uniteConfigurationStub, engineVariablesStub);
            Chai.expect(res).to.be.equal(true);
        }));
    });
    describe("configure", () => {
        it("can succeed if not correct package manager", () => __awaiter(this, void 0, void 0, function* () {
            uniteConfigurationStub.packageManager = undefined;
            const obj = new npm_1.Npm();
            const res = yield obj.configure(loggerStub, fileSystemMock, uniteConfigurationStub, engineVariablesStub, true);
            Chai.expect(res).to.be.equal(0);
        }));
        it("can succeed if no gitignore", () => __awaiter(this, void 0, void 0, function* () {
            const obj = new npm_1.Npm();
            const res = yield obj.configure(loggerStub, fileSystemMock, uniteConfigurationStub, engineVariablesStub, true);
            Chai.expect(res).to.be.equal(0);
        }));
        it("can succeed and add to config", () => __awaiter(this, void 0, void 0, function* () {
            engineVariablesStub.setConfiguration("GitIgnore", []);
            engineVariablesStub.setConfiguration("TypeScript", { exclude: [] });
            engineVariablesStub.setConfiguration("JavaScript", { exclude: [] });
            const obj = new npm_1.Npm();
            const res = yield obj.configure(loggerStub, fileSystemMock, uniteConfigurationStub, engineVariablesStub, true);
            Chai.expect(res).to.be.equal(0);
            Chai.expect(engineVariablesStub.getConfiguration("GitIgnore")).to.be.deep.equal(["node_modules"]);
            Chai.expect(engineVariablesStub.getConfiguration("TypeScript").exclude).to.be.deep.equal(["node_modules"]);
            Chai.expect(engineVariablesStub.getConfiguration("JavaScript").exclude).to.be.deep.equal(["node_modules"]);
        }));
        it("can be called with no configurations with false mainCondition", () => __awaiter(this, void 0, void 0, function* () {
            const obj = new npm_1.Npm();
            const res = yield obj.configure(loggerStub, fileSystemMock, uniteConfigurationStub, engineVariablesStub, false);
            Chai.expect(res).to.be.equal(0);
        }));
        it("can be called with configurations with false mainCondition", () => __awaiter(this, void 0, void 0, function* () {
            engineVariablesStub.setConfiguration("GitIgnore", ["node_modules"]);
            engineVariablesStub.setConfiguration("TypeScript", { exclude: ["node_modules"] });
            engineVariablesStub.setConfiguration("JavaScript", { exclude: ["node_modules"] });
            const obj = new npm_1.Npm();
            const res = yield obj.configure(loggerStub, fileSystemMock, uniteConfigurationStub, engineVariablesStub, false);
            Chai.expect(res).to.be.equal(0);
            Chai.expect(engineVariablesStub.getConfiguration("GitIgnore")).not.contains("node_modules");
            Chai.expect(engineVariablesStub.getConfiguration("TypeScript").exclude).not.contains("node_modules");
            Chai.expect(engineVariablesStub.getConfiguration("JavaScript").exclude).not.contains("node_modules");
        }));
    });
    describe("info", () => {
        it("can throw an error for an unknown package", () => __awaiter(this, void 0, void 0, function* () {
            sandbox.stub(packageUtils_1.PackageUtils, "exec").rejects("error");
            const obj = new npm_1.Npm();
            try {
                yield obj.info(loggerStub, fileSystemMock, "lkjdfglkjdfzsdf", undefined);
            }
            catch (err) {
                Chai.expect(err.message).to.contain("error");
            }
        }));
        it("can get the info for a package with no version", () => __awaiter(this, void 0, void 0, function* () {
            const stub = sandbox.stub(packageUtils_1.PackageUtils, "exec").resolves(JSON.stringify({ version: "1.2.3", main: "index.js" }));
            const obj = new npm_1.Npm();
            const res = yield obj.info(loggerStub, fileSystemMock, "package", undefined);
            Chai.expect(stub.args[0][4]).to.contain("view");
            Chai.expect(stub.args[0][4]).to.contain("package");
            Chai.expect(stub.args[0][4]).to.contain("--json");
            Chai.expect(stub.args[0][4]).to.contain("name");
            Chai.expect(stub.args[0][4]).to.contain("version");
            Chai.expect(stub.args[0][4]).to.contain("main");
            Chai.expect(res.version).to.be.equal("1.2.3");
            Chai.expect(res.main).to.be.equal("index.js");
        }));
        it("can get the info for a package with version", () => __awaiter(this, void 0, void 0, function* () {
            const stub = sandbox.stub(packageUtils_1.PackageUtils, "exec").resolves(JSON.stringify({ version: "1.2.3", main: "index.js" }));
            const obj = new npm_1.Npm();
            const res = yield obj.info(loggerStub, fileSystemMock, "package", "4.5.6");
            Chai.expect(stub.args[0][4]).to.contain("view");
            Chai.expect(stub.args[0][4]).to.contain("package@4.5.6");
            Chai.expect(stub.args[0][4]).to.contain("--json");
            Chai.expect(stub.args[0][4]).to.contain("name");
            Chai.expect(stub.args[0][4]).to.contain("version");
            Chai.expect(stub.args[0][4]).to.contain("main");
            Chai.expect(res.version).to.be.equal("1.2.3");
            Chai.expect(res.main).to.be.equal("index.js");
        }));
    });
    describe("add", () => {
        it("can throw an error for an unknown package", () => __awaiter(this, void 0, void 0, function* () {
            sandbox.stub(packageUtils_1.PackageUtils, "exec").rejects("error");
            const obj = new npm_1.Npm();
            try {
                yield obj.add(loggerStub, fileSystemMock, "/.", "lkjdfglkjdfzsdf", "1.2.3", true);
            }
            catch (err) {
                Chai.expect(err.message).to.contain("error");
            }
        }));
        it("can add a dev package", () => __awaiter(this, void 0, void 0, function* () {
            const stub = sandbox.stub(packageUtils_1.PackageUtils, "exec").resolves();
            const obj = new npm_1.Npm();
            const res = yield obj.add(loggerStub, fileSystemMock, "/.", "package", "1.2.3", true);
            Chai.expect(res).to.be.equal(undefined);
            Chai.expect(stub.args[0][4]).to.contain("install");
            Chai.expect(stub.args[0][4]).to.contain("package@1.2.3");
            Chai.expect(stub.args[0][4]).to.contain("--save-dev");
        }));
        it("can add a prod package", () => __awaiter(this, void 0, void 0, function* () {
            const stub = sandbox.stub(packageUtils_1.PackageUtils, "exec").resolves();
            const obj = new npm_1.Npm();
            const res = yield obj.add(loggerStub, fileSystemMock, "/.", "package", "1.2.3", false);
            Chai.expect(res).to.be.equal(undefined);
            Chai.expect(stub.args[0][4]).to.contain("install");
            Chai.expect(stub.args[0][4]).to.contain("package@1.2.3");
            Chai.expect(stub.args[0][4]).to.contain("--save-prod");
        }));
    });
    describe("remove", () => {
        it("can throw an error for an unknown package", () => __awaiter(this, void 0, void 0, function* () {
            sandbox.stub(packageUtils_1.PackageUtils, "exec").rejects("error");
            const obj = new npm_1.Npm();
            try {
                yield obj.remove(loggerStub, fileSystemMock, "/.", "lkjdfglkjdfzsdf", true);
            }
            catch (err) {
                Chai.expect(err.message).to.contain("error");
            }
        }));
        it("can remove a dev package", () => __awaiter(this, void 0, void 0, function* () {
            const stub = sandbox.stub(packageUtils_1.PackageUtils, "exec").resolves();
            const obj = new npm_1.Npm();
            const res = yield obj.remove(loggerStub, fileSystemMock, "/.", "package", true);
            Chai.expect(res).to.be.equal(undefined);
            Chai.expect(stub.args[0][4]).to.contain("uninstall");
            Chai.expect(stub.args[0][4]).to.contain("package");
            Chai.expect(stub.args[0][4]).to.contain("--save-dev");
        }));
        it("can remove a prod package", () => __awaiter(this, void 0, void 0, function* () {
            const stub = sandbox.stub(packageUtils_1.PackageUtils, "exec").resolves();
            const obj = new npm_1.Npm();
            const res = yield obj.remove(loggerStub, fileSystemMock, "/.", "package", false);
            Chai.expect(res).to.be.equal(undefined);
            Chai.expect(stub.args[0][4]).to.contain("uninstall");
            Chai.expect(stub.args[0][4]).to.contain("package");
            Chai.expect(stub.args[0][4]).to.contain("--save");
        }));
    });
    describe("getInstallCommand", () => {
        it("can call as plain install", () => __awaiter(this, void 0, void 0, function* () {
            const obj = new npm_1.Npm();
            const res = obj.getInstallCommand("", false);
            Chai.expect(res).to.contain("npm install");
        }));
        it("can call to install a package", () => __awaiter(this, void 0, void 0, function* () {
            const obj = new npm_1.Npm();
            const res = obj.getInstallCommand("package", false);
            Chai.expect(res).to.contain("npm install package");
        }));
        it("can call to install a global package", () => __awaiter(this, void 0, void 0, function* () {
            const obj = new npm_1.Npm();
            const res = obj.getInstallCommand("package", true);
            Chai.expect(res).to.contain("npm -g install package");
        }));
    });
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,
