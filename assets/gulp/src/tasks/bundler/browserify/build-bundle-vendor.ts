/**
 * Gulp tasks for wrapping Browserify modules.
 */
import * as browserify from "browserify";
import * as gulp from "gulp";
import * as buffer from "vinyl-buffer";
import * as source from "vinyl-source-stream";
import * as asyncUtil from "../../util/async-util";
import * as clientPackages from "../../util/client-packages";
import * as display from "../../util/display";
import * as uc from "../../util/unite-config";

gulp.task("build-bundle-vendor", async () => {
    const uniteConfig = await uc.getUniteConfig();

    const buildConfiguration = uc.getBuildConfiguration(uniteConfig, false);

    if (buildConfiguration.bundle) {
        display.info("Running", "Browserify for Vendor");

        const bVendor = browserify({debug: buildConfiguration.sourcemaps});
        bVendor.transform("envify", {
            NODE_ENV: buildConfiguration.minify ? "production" : "development",
            global: true
        });

        const excludeMinify: string[] = [];
        const vendorPackages = await clientPackages.getBundleVendorPackages(uniteConfig);

        Object.keys(vendorPackages).forEach((key) => {
            const idx = key.indexOf("systemjs");
            if (idx < 0) {
                display.info("Adding", key);
                bVendor.require(`./${vendorPackages[key].file}`, {expose: key});
                if (vendorPackages[key].isMinified) {
                    excludeMinify.push(vendorPackages[key].file);
                }
            }
        });

        bVendor.transform("babelify", {
            global: true,
            presets: ["@babel/preset-env"]
        });

        if (buildConfiguration.minify) {
            bVendor.transform("uglifyify", {sourceMap: buildConfiguration.sourcemaps, x: excludeMinify});
        }

        return asyncUtil.stream(bVendor.bundle().on("error", (err) => {
            display.error(err);
        })
            .pipe(source("vendor-bundle.js"))
            .pipe(buffer())
            .pipe(gulp.dest(uniteConfig.dirs.www.dist)));
    }
});

// Generated by UniteJS
