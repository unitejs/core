/**
 * Gulp tasks for e2e testing JavaScript.
 */
import * as gulp from "gulp";
import * as babel from "gulp-babel";
import * as sourcemaps from "gulp-sourcemaps";
import * as minimist from "minimist";
import * as path from "path";
import * as asyncUtil from "../../util/async-util";
import * as display from "../../util/display";
import * as errorUtil from "../../util/error-util";
import * as uc from "../../util/unite-config";

gulp.task("e2e-transpile", async () => {
    display.info("Running", "Babel");

    const knownOptions = {
        default: {
            grep: "*"
        },
        string: [
            "grep"
        ]
    };

    const options = minimist(process.argv.slice(2), knownOptions);

    const uniteConfig = await uc.getUniteConfig();

    let errorCount = 0;

    return asyncUtil.stream(gulp.src([
        path.join(
            uniteConfig.dirs.www.e2eTestSrc,
            `**/${options.grep}.spec.${uc.extensionMap(uniteConfig.sourceExtensions)}`
        ),
        path.join(
            uniteConfig.dirs.www.e2eTestSrc,
            `**/!(*.spec).${uc.extensionMap(uniteConfig.sourceExtensions)}`
        )
    ])
        .pipe(sourcemaps.init())
        .pipe(babel({
            babelrc: false,
            presets: [
                [
                    "@babel/preset-env",
                    {modules: "commonjs"}
                ]
            ]
        }))
        .on("error", (err) => {
            display.error(err.message);
            if (err.codeFrame) {
                display.error(`\n${err.codeFrame}`);
            }
            errorCount++;
        })
        .on("error", errorUtil.handleErrorEvent)
        .pipe(sourcemaps.write({includeContent: true}))
        .pipe(gulp.dest(uniteConfig.dirs.www.e2eTestDist))
        .on("end", () => {
            errorUtil.handleErrorCount(errorCount);
        }));
});

// Generated by UniteJS
