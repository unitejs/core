/**
 * Gulp tasks for building JavaScript.
 */
import * as gulp from "gulp";
import * as babel from "gulp-babel";
import * as sourcemaps from "gulp-sourcemaps";
import * as uglify from "gulp-uglify";
import * as path from "path";
import * as stream from "stream";
import * as through2 from "through2";
import * as asyncUtil from "../../util/async-util";
import * as display from "../../util/display";
import * as errorUtil from "../../util/error-util";
import * as uc from "../../util/unite-config";
/*! {TRANSPILEINCLUDE} */

gulp.task("build-transpile", async () => {
    display.info("Running", "Babel");

    const uniteConfig = await uc.getUniteConfig();
    const buildConfiguration = uc.getBuildConfiguration(uniteConfig, true);

    let errorCount = 0;

    return asyncUtil.stream(gulp.src(path.join(
        uniteConfig.dirs.www.src,
        `**/*.${uc.extensionMap(uniteConfig.sourceExtensions)}`
    ))
        .pipe(buildConfiguration.sourcemaps ? sourcemaps.init() : through2.obj())
        .pipe(<stream.Transform><any>"{TRANSPILEPREBUILD}")
        .pipe(babel())
        .on("error", (err) => {
            display.error(err.message);
            if (err.codeFrame) {
                display.error(`\n${err.codeFrame}`);
            }
            errorCount++;
        })
        .pipe(<stream.Transform><any>"{TRANSPILEPOSTBUILD}")
        .on("error", errorUtil.handleErrorEvent)
        .pipe(buildConfiguration.minify ? uglify()
            .on("error", (err) => {
                display.error(err.toString());
            }) : through2.obj())
        .pipe(buildConfiguration.sourcemaps
            ? sourcemaps.mapSources((sourcePath) => `./src/${sourcePath}`) : through2.obj())
        .pipe(buildConfiguration.sourcemaps ? sourcemaps.write({
            includeContent: true,
            sourceRoot: ""
        }) : through2.obj())
        .pipe(gulp.dest(uniteConfig.dirs.www.dist))
        .on("end", () => {
            errorUtil.handleErrorCount(errorCount);
        }));
});

// Generated by UniteJS
