/**
 * Gulp tasks for wrapping Webpack modules.
 */
const gulp = require("gulp");
const path = require("path");
const UglifyJSPlugin = require("uglifyjs-webpack-plugin");
const webpack = require("webpack");
const webpackStream = require("webpack-stream");
const asyncUtil = require("../../util/async-util");
const clientPackages = require("../../util/client-packages");
const display = require("../../util/display");
const uc = require("../../util/unite-config");
gulp.task("build-bundle-app", async () => {
    const uniteConfig = await uc.getUniteConfig();
    const buildConfiguration = uc.getBuildConfiguration(uniteConfig, false);
    if (buildConfiguration.bundle) {
        display.info("Running", "Webpack for App");
        const entry = {};
        const plugins = [];
        const vendorPackages = await clientPackages.getBundleVendorPackages(uniteConfig);
        const vendorKeys = [];
        const vendorAliases = {};
        let hasStyleLoader = false;
        Object.keys(vendorPackages).forEach((key) => {
            const idx = key.indexOf("systemjs");
            if (idx < 0) {
                display.info("Adding", `${vendorPackages[key].file}`);
                vendorKeys.push(key);
                vendorAliases[`${key}${vendorPackages[key].useExact ? "$" : ""}`] =
                    path.resolve(`${vendorPackages[key].file}`);
            } else {
                hasStyleLoader = key === "systemjs-plugin-css";
            }
        });
        if (vendorKeys.length > 0) {
            entry.vendor = vendorKeys;
        }
        if (buildConfiguration.minify) {
            plugins.push(new UglifyJSPlugin());
        }
        plugins.push(new webpack.DefinePlugin({
            "process.env": {
                NODE_ENV: JSON.stringify(buildConfiguration.minify ? "production" : "development")
            }
        }));
        entry.app = `./${path.join(uniteConfig.dirs.www.dist, "entryPoint.js")}`;
        const newModule = {
            rules: []
        };
        const webpackOptions = {
            entry,
            output: {
                devtoolModuleFilenameTemplate: "[resource-path]",
                filename: "app-bundle.js",
                chunkFilename: "[name]-bundle.js"
            },
            plugins,
            module: newModule,
            resolve: {
                alias: vendorAliases
            },
            mode: buildConfiguration.minify ? "production" : "development",
            optimization: {
                splitChunks: {
                    cacheGroups: {
                        vendor: {
                            chunks: "initial",
                            name: "vendor",
                            test: "vendor",
                            enforce: true
                        }
                    }
                }
            }
        };
        newModule.rules.push({
            test: new RegExp(".css$"),
            use: hasStyleLoader ? ["style-loader", "css-loader"] : ["raw-loader"]
        });
        uniteConfig.viewExtensions.forEach((ext) => {
            newModule.rules.push({
                test: new RegExp(`.${ext}$`),
                use: ["raw-loader"]
            });
        });
        if (buildConfiguration.sourcemaps) {
            webpackOptions.devtool = "inline-source-map";
            newModule.rules.push({
                test: /\.js$/,
                enforce: "pre",
                loader: "source-map-loader"
            });
        }
        return asyncUtil.stream(gulp.src(entry.app)
            .pipe(webpackStream(webpackOptions, webpack))
            .pipe(gulp.dest(uniteConfig.dirs.www.dist)));
    }
});
// Generated by UniteJS
