/**
 * Gulp tasks for wrapping Browserify modules.
 */
const browserify = require("browserify");
const gulp = require("gulp");
const buffer = require("vinyl-buffer");
const source = require("vinyl-source-stream");
const asyncUtil = require("../../util/async-util");
const clientPackages = require("../../util/client-packages");
const display = require("../../util/display");
const uc = require("../../util/unite-config");
gulp.task("build-bundle-vendor", async () => {
    const uniteConfig = await uc.getUniteConfig();
    const buildConfiguration = uc.getBuildConfiguration(uniteConfig, false);
    if (buildConfiguration.bundle) {
        display.info("Running", "Browserify for Vendor");
        const bVendor = browserify({
            debug: buildConfiguration.sourcemaps
        });
        bVendor.transform("envify", {
            NODE_ENV: buildConfiguration.minify ? "production" : "development",
            global: true
        });
        const excludeMinify = [];
        const vendorPackages = await clientPackages.getBundleVendorPackages(uniteConfig);
        Object.keys(vendorPackages).forEach((key) => {
            const idx = key.indexOf("systemjs");
            if (idx < 0) {
                display.info("Adding", key);
                bVendor.require(`./${vendorPackages[key].file}`, {
                    expose: key
                });
                if (vendorPackages[key].isMinified) {
                    excludeMinify.push(vendorPackages[key].file);
                }
            }
        });
        bVendor.transform("babelify", {
            global: true,
            presets: ["@babel/preset-env"]
        });
        if (buildConfiguration.minify) {
            bVendor.transform("uglifyify", {
                sourceMap: buildConfiguration.sourcemaps,
                x: excludeMinify
            });
        }
        return asyncUtil.stream(bVendor.bundle().on("error", (err) => {
                display.error(err);
            })
            .pipe(source("vendor-bundle.js"))
            .pipe(buffer())
            .pipe(gulp.dest(uniteConfig.dirs.www.dist)));
    }
});
// Generated by UniteJS
